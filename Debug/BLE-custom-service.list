
BLE-custom-service.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005024  08005024  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800502c  0800502c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000088  080050bc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  080050bc  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215f9  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035af  00000000  00000000  000416b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00044c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00045ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e23  00000000  00000000  00046c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015352  00000000  00000000  00060a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000923c7  00000000  00000000  00075db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010817c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  001081d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e70 	.word	0x08004e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004e70 	.word	0x08004e70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800058c:	2006      	movs	r0, #6
 800058e:	f001 f81e 	bl	80015ce <HAL_NVIC_EnableIRQ>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}

08000596 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800059a:	2006      	movs	r0, #6
 800059c:	f001 f825 	bl	80015ea <HAL_NVIC_DisableIRQ>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005c8:	2301      	movs	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 80005de:	f001 f871 	bl	80016c4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 80005fc:	f001 f862 	bl	80016c4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 8000618:	f001 f854 	bl	80016c4 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 8000622:	f001 facf 	bl	8001bc4 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000626:	f000 fa31 	bl	8000a8c <BSP_SPI1_Init>
 800062a:	4603      	mov	r3, r0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000

0800063c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000640:	2101      	movs	r1, #1
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 8000644:	f001 f9c2 	bl	80019cc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000648:	2102      	movs	r1, #2
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 800064c:	f001 f9be 	bl	80019cc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 8000656:	f001 f9b9 	bl	80019cc <HAL_GPIO_DeInit>
  return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020000 	.word	0x40020000

08000664 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2102      	movs	r1, #2
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800066e:	f001 faa9 	bl	8001bc4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800067a:	f001 faa3 	bl	8001bc4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f000 fe66 	bl	8001350 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800068c:	f001 fa9a 	bl	8001bc4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000690:	2005      	movs	r0, #5
 8000692:	f000 fe5d 	bl	8001350 <HAL_Delay>
  return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020000 	.word	0x40020000

080006a0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006b0:	2300      	movs	r3, #0
 80006b2:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006b4:	4a30      	ldr	r2, [pc, #192]	; (8000778 <HCI_TL_SPI_Receive+0xd8>)
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	3304      	adds	r3, #4
 80006c2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006c4:	f7ff ff67 	bl	8000596 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 80006ce:	f001 fa79 	bl	8001bc4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006d2:	f107 0108 	add.w	r1, r7, #8
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2205      	movs	r2, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fa05 	bl	8000aec <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006e2:	7b3b      	ldrb	r3, [r7, #12]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	7afb      	ldrb	r3, [r7, #11]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d01e      	beq.n	8000736 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006f8:	8bfa      	ldrh	r2, [r7, #30]
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d901      	bls.n	8000704 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000704:	2300      	movs	r3, #0
 8000706:	777b      	strb	r3, [r7, #29]
 8000708:	e010      	b.n	800072c <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800070a:	f107 0116 	add.w	r1, r7, #22
 800070e:	f107 0317 	add.w	r3, r7, #23
 8000712:	2201      	movs	r2, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f9e9 	bl	8000aec <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800071a:	7f7b      	ldrb	r3, [r7, #29]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	7dba      	ldrb	r2, [r7, #22]
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000726:	7f7b      	ldrb	r3, [r7, #29]
 8000728:	3301      	adds	r3, #1
 800072a:	777b      	strb	r3, [r7, #29]
 800072c:	7f7b      	ldrb	r3, [r7, #29]
 800072e:	b29b      	uxth	r3, r3
 8000730:	8bfa      	ldrh	r2, [r7, #30]
 8000732:	429a      	cmp	r2, r3
 8000734:	d8e9      	bhi.n	800070a <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000736:	f000 fdff 	bl	8001338 <HAL_GetTick>
 800073a:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800073c:	e006      	b.n	800074c <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800073e:	2101      	movs	r1, #1
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 8000742:	f001 fa27 	bl	8001b94 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800074c:	f000 fdf4 	bl	8001338 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800075a:	d3f0      	bcc.n	800073e <HCI_TL_SPI_Receive+0x9e>
 800075c:	e000      	b.n	8000760 <HCI_TL_SPI_Receive+0xc0>
      break;
 800075e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000760:	f7ff ff12 	bl	8000588 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2102      	movs	r1, #2
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 800076a:	f001 fa2b 	bl	8001bc4 <HAL_GPIO_WritePin>

  return len;
 800076e:	7f7b      	ldrb	r3, [r7, #29]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08004e88 	.word	0x08004e88
 800077c:	40020000 	.word	0x40020000

08000780 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800078c:	4a3f      	ldr	r2, [pc, #252]	; (800088c <HCI_TL_SPI_Send+0x10c>)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800079c:	f000 fdcc 	bl	8001338 <HAL_GetTick>
 80007a0:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80007a2:	f7ff fef8 	bl	8000596 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80007a6:	f000 fdc7 	bl	8001338 <HAL_GetTick>
 80007aa:	61f8      	str	r0, [r7, #28]

    result = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	4836      	ldr	r0, [pc, #216]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 80007b6:	f001 fa05 	bl	8001bc4 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80007ba:	e00a      	b.n	80007d2 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80007bc:	f000 fdbc 	bl	8001338 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d903      	bls.n	80007d2 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80007ca:	f06f 0302 	mvn.w	r3, #2
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80007d0:	e004      	b.n	80007dc <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80007d2:	f000 f861 	bl	8000898 <IsDataAvailable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0ef      	beq.n	80007bc <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	f113 0f03 	cmn.w	r3, #3
 80007e2:	d105      	bne.n	80007f0 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2102      	movs	r1, #2
 80007e8:	4829      	ldr	r0, [pc, #164]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 80007ea:	f001 f9eb 	bl	8001bc4 <HAL_GPIO_WritePin>
      break;
 80007ee:	e030      	b.n	8000852 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007f0:	f107 010c 	add.w	r1, r7, #12
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2205      	movs	r2, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f976 	bl	8000aec <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	b21a      	sxth	r2, r3
 8000806:	7b7b      	ldrb	r3, [r7, #13]
 8000808:	b21b      	sxth	r3, r3
 800080a:	4313      	orrs	r3, r2
 800080c:	b21b      	sxth	r3, r3
 800080e:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000810:	8b7a      	ldrh	r2, [r7, #26]
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	429a      	cmp	r2, r3
 8000816:	d306      	bcc.n	8000826 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	461a      	mov	r2, r3
 800081c:	491d      	ldr	r1, [pc, #116]	; (8000894 <HCI_TL_SPI_Send+0x114>)
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f964 	bl	8000aec <BSP_SPI1_SendRecv>
 8000824:	e002      	b.n	800082c <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000826:	f06f 0301 	mvn.w	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2102      	movs	r1, #2
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 8000832:	f001 f9c7 	bl	8001bc4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000836:	f000 fd7f 	bl	8001338 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d903      	bls.n	800084c <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000844:	f06f 0302 	mvn.w	r3, #2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800084a:	e002      	b.n	8000852 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b00      	cmp	r3, #0
 8000850:	dba9      	blt.n	80007a6 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8000852:	f000 fd71 	bl	8001338 <HAL_GetTick>
 8000856:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000858:	e006      	b.n	8000868 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800085a:	2101      	movs	r1, #1
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 800085e:	f001 f999 	bl	8001b94 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000868:	f000 fd66 	bl	8001338 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000876:	d3f0      	bcc.n	800085a <HCI_TL_SPI_Send+0xda>
 8000878:	e000      	b.n	800087c <HCI_TL_SPI_Send+0xfc>
      break;
 800087a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800087c:	f7ff fe84 	bl	8000588 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000882:	4618      	mov	r0, r3
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08004e90 	.word	0x08004e90
 8000890:	40020000 	.word	0x40020000
 8000894:	200000a4 	.word	0x200000a4

08000898 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <IsDataAvailable+0x1c>)
 80008a0:	f001 f978 	bl	8001b94 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40020000 	.word	0x40020000

080008b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <hci_tl_lowlevel_init+0x54>)
 80008c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <hci_tl_lowlevel_init+0x58>)
 80008c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <hci_tl_lowlevel_init+0x5c>)
 80008c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <hci_tl_lowlevel_init+0x60>)
 80008cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <hci_tl_lowlevel_init+0x64>)
 80008d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <hci_tl_lowlevel_init+0x68>)
 80008d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 f895 	bl	8003a08 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80008de:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <hci_tl_lowlevel_init+0x6c>)
 80008e4:	f000 feb5 	bl	8001652 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80008e8:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <hci_tl_lowlevel_init+0x70>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <hci_tl_lowlevel_init+0x6c>)
 80008ee:	f000 fe96 	bl	800161e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2006      	movs	r0, #6
 80008f8:	f000 fe4d 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008fc:	2006      	movs	r0, #6
 80008fe:	f000 fe66 	bl	80015ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	080005a5 	.word	0x080005a5
 8000910:	0800063d 	.word	0x0800063d
 8000914:	08000781 	.word	0x08000781
 8000918:	080006a1 	.word	0x080006a1
 800091c:	08000665 	.word	0x08000665
 8000920:	08000b2d 	.word	0x08000b2d
 8000924:	2000074c 	.word	0x2000074c
 8000928:	0800092d 	.word	0x0800092d

0800092c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000930:	e005      	b.n	800093e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000932:	2000      	movs	r0, #0
 8000934:	f003 f9a2 	bl	8003c7c <hci_notify_asynch_evt>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800093e:	f7ff ffab 	bl	8000898 <IsDataAvailable>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f4      	bne.n	8000932 <hci_tl_lowlevel_isr+0x6>
 8000948:	e000      	b.n	800094c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800094a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <bluenrg_init>:

#define BDADDR_SIZE		6

uint8_t  SERVER_BDARR[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};

void bluenrg_init(void){
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af02      	add	r7, sp, #8

	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "Juan";
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <bluenrg_init+0xcc>)
 8000958:	617b      	str	r3, [r7, #20]
	uint16_t service_handle, dev_name_char_handle, appearance_char_habdle;

	BLUENRG_memcpy(bdaddr, SERVER_BDARR, sizeof(SERVER_BDARR));
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <bluenrg_init+0xd0>)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000964:	6018      	str	r0, [r3, #0]
 8000966:	3304      	adds	r3, #4
 8000968:	8019      	strh	r1, [r3, #0]

	// Initialize HCI
	hci_init(NULL, NULL);
 800096a:	2100      	movs	r1, #0
 800096c:	2000      	movs	r0, #0
 800096e:	f003 f809 	bl	8003984 <hci_init>
	//Reset HCI
	hci_reset();
 8000972:	f002 fbfd 	bl	8003170 <hci_reset>
	HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	; 0x64
 8000978:	f000 fcea 	bl	8001350 <HAL_Delay>
	//Configure device address
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	461a      	mov	r2, r3
 8000982:	2106      	movs	r1, #6
 8000984:	2000      	movs	r0, #0
 8000986:	f002 fef3 	bl	8003770 <aci_hal_write_config_data>
 800098a:	4603      	mov	r3, r0
 800098c:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <bluenrg_init+0x4a>
		printf("aci_hal_write_config_data : FAILED \n\r");
 8000994:	4823      	ldr	r0, [pc, #140]	; (8000a24 <bluenrg_init+0xd4>)
 8000996:	f003 fb15 	bl	8003fc4 <iprintf>
	}
	//Initialize GATT server
	ret = aci_gatt_init();
 800099a:	f002 fd82 	bl	80034a2 <aci_gatt_init>
 800099e:	4603      	mov	r3, r0
 80009a0:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <bluenrg_init+0x5e>
		printf("aci_gatt_init : FAILED \n\r");
 80009a8:	481f      	ldr	r0, [pc, #124]	; (8000a28 <bluenrg_init+0xd8>)
 80009aa:	f003 fb0b 	bl	8003fc4 <iprintf>
	}
	//Initialize GAP service
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07,  &service_handle, &dev_name_char_handle, &appearance_char_habdle);
 80009ae:	f107 020a 	add.w	r2, r7, #10
 80009b2:	1dbb      	adds	r3, r7, #6
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	4613      	mov	r3, r2
 80009be:	2207      	movs	r2, #7
 80009c0:	2100      	movs	r1, #0
 80009c2:	2001      	movs	r0, #1
 80009c4:	f002 fce2 	bl	800338c <aci_gap_init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <bluenrg_init+0x88>
		printf("aci_gap_init : FAILED \n\r");
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <bluenrg_init+0xdc>)
 80009d4:	f003 faf6 	bl	8003fc4 <iprintf>
	}
	//Update device name characteristic
	aci_gatt_update_char_value(&service_handle, &dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 80009d8:	f107 030a 	add.w	r3, r7, #10
 80009dc:	b29c      	uxth	r4, r3
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	b29d      	uxth	r5, r3
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f7ff fbfb 	bl	80001e0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	2200      	movs	r2, #0
 80009f6:	4629      	mov	r1, r5
 80009f8:	4620      	mov	r0, r4
 80009fa:	f002 fe2b 	bl	8003654 <aci_gatt_update_char_value>
	//Add custom service
	ret = add_siemple_service();
 80009fe:	f000 fa8d 	bl	8000f1c <add_siemple_service>
 8000a02:	4603      	mov	r3, r0
 8000a04:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 8000a06:	7cfb      	ldrb	r3, [r7, #19]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <bluenrg_init+0xc2>
		printf("add_siemple_service : FAILED \n\r");
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <bluenrg_init+0xe0>)
 8000a0e:	f003 fad9 	bl	8003fc4 <iprintf>
	}
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08004e98 	.word	0x08004e98
 8000a20:	20000000 	.word	0x20000000
 8000a24:	08004ea0 	.word	0x08004ea0
 8000a28:	08004ec8 	.word	0x08004ec8
 8000a2c:	08004ee4 	.word	0x08004ee4
 8000a30:	08004f00 	.word	0x08004f00

08000a34 <bluenrg_process>:

void bluenrg_process(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af08      	add	r7, sp, #32

	tBleStatus ret;

	uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L','E', '-', 'J', 'U', 'A', 'N'};
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <bluenrg_process+0x50>)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a40:	c303      	stmia	r3!, {r0, r1}
 8000a42:	701a      	strb	r2, [r3, #0]

	//Set device in General Discoverable Mode
	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000a44:	2300      	movs	r3, #0
 8000a46:	9306      	str	r3, [sp, #24]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9305      	str	r3, [sp, #20]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9304      	str	r3, [sp, #16]
 8000a50:	2300      	movs	r3, #0
 8000a52:	9303      	str	r3, [sp, #12]
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	2309      	movs	r3, #9
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2300      	movs	r3, #0
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2000      	movs	r0, #0
 8000a68:	f002 fbab 	bl	80031c2 <aci_gap_set_discoverable>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	73fb      	strb	r3, [r7, #15]
	if(ret != BLE_STATUS_SUCCESS){
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <bluenrg_process+0x48>
		printf("aci_gap_set_discoverable : FAILED \n\r");
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <bluenrg_process+0x54>)
 8000a78:	f003 faa4 	bl	8003fc4 <iprintf>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08004f48 	.word	0x08004f48
 8000a88:	08004f20 	.word	0x08004f20

08000a8c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <BSP_SPI1_Init+0x54>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <BSP_SPI1_Init+0x58>)
 8000a9a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <BSP_SPI1_Init+0x5c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	4911      	ldr	r1, [pc, #68]	; (8000ae8 <BSP_SPI1_Init+0x5c>)
 8000aa4:	600a      	str	r2, [r1, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d114      	bne.n	8000ad4 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <BSP_SPI1_Init+0x54>)
 8000aac:	f001 ff71 	bl	8002992 <HAL_SPI_GetState>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10e      	bne.n	8000ad4 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <BSP_SPI1_Init+0x54>)
 8000ab8:	f000 f87c 	bl	8000bb4 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d108      	bne.n	8000ad4 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <BSP_SPI1_Init+0x54>)
 8000ac4:	f000 f83a 	bl	8000b3c <MX_SPI1_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000ace:	f06f 0307 	mvn.w	r3, #7
 8000ad2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000754 	.word	0x20000754
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	200001a4 	.word	0x200001a4

08000aec <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	4613      	mov	r3, r2
 8000af8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	68f9      	ldr	r1, [r7, #12]
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <BSP_SPI1_SendRecv+0x3c>)
 8000b0c:	f001 fd9f 	bl	800264e <HAL_SPI_TransmitReceive>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b16:	f06f 0305 	mvn.w	r3, #5
 8000b1a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000b1c:	697b      	ldr	r3, [r7, #20]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000754 	.word	0x20000754

08000b2c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b30:	f000 fc02 	bl	8001338 <HAL_GetTick>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b74:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2228      	movs	r2, #40	; 0x28
 8000b7a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	220a      	movs	r2, #10
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f001 fcc7 	bl	8002528 <HAL_SPI_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc4:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bca:	6453      	str	r3, [r2, #68]	; 0x44
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <SPI1_MspInit+0xc4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000c10:	2340      	movs	r3, #64	; 0x40
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000c20:	2305      	movs	r3, #5
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <SPI1_MspInit+0xc8>)
 8000c2c:	f000 fd4a 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000c40:	2305      	movs	r3, #5
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <SPI1_MspInit+0xc8>)
 8000c4c:	f000 fd3a 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000c50:	2308      	movs	r3, #8
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000c60:	2305      	movs	r3, #5
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <SPI1_MspInit+0xcc>)
 8000c6c:	f000 fd2a 	bl	80016c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400

08000c84 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8000c8c:	1d39      	adds	r1, r7, #4
 8000c8e:	230a      	movs	r3, #10
 8000c90:	2201      	movs	r2, #1
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <__io_putchar+0x20>)
 8000c94:	f001 ffa3 	bl	8002bde <HAL_UART_Transmit>

	return ch;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200007ac 	.word	0x200007ac

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fade 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f80e 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f89e 	bl	8000df4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cb8:	f000 f872 	bl	8000da0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //1 Enable BLE module
  bluenrg_init();
 8000cbc:	f7ff fe48 	bl	8000950 <bluenrg_init>
  printf("Initialization successful...\n\r");
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <main+0x24>)
 8000cc2:	f003 f97f 	bl	8003fc4 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //2. Process BLE
	  bluenrg_process();
 8000cc6:	f7ff feb5 	bl	8000a34 <bluenrg_process>
 8000cca:	e7fc      	b.n	8000cc6 <main+0x1e>
 8000ccc:	08004f54 	.word	0x08004f54

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f968 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <SystemClock_Config+0xc8>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <SystemClock_Config+0xc8>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <SystemClock_Config+0xc8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <SystemClock_Config+0xcc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <SystemClock_Config+0xcc>)
 8000d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <SystemClock_Config+0xcc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	2301      	movs	r3, #1
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d34:	2310      	movs	r3, #16
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d40:	2308      	movs	r3, #8
 8000d42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 ff73 	bl	8001c40 <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d60:	f000 f8d6 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 f9d5 	bl	8002130 <HAL_RCC_ClockConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d8c:	f000 f8c0 	bl	8000f10 <Error_Handler>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3750      	adds	r7, #80	; 0x50
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART2_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dd8:	f001 feb4 	bl	8002b44 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 f895 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200007ac 	.word	0x200007ac
 8000df0:	40004400 	.word	0x40004400

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a3c      	ldr	r2, [pc, #240]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a35      	ldr	r2, [pc, #212]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a2e      	ldr	r2, [pc, #184]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b2c      	ldr	r3, [pc, #176]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000e80:	4821      	ldr	r0, [pc, #132]	; (8000f08 <MX_GPIO_Init+0x114>)
 8000e82:	f000 fe9f 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481b      	ldr	r0, [pc, #108]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e9e:	f000 fc11 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_GPIO_Init+0x114>)
 8000eb8:	f000 fc04 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8000ebc:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <MX_GPIO_Init+0x114>)
 8000ed6:	f000 fbf5 	bl	80016c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f000 fb59 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ee4:	2006      	movs	r0, #6
 8000ee6:	f000 fb72 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2028      	movs	r0, #40	; 0x28
 8000ef0:	f000 fb51 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef4:	2028      	movs	r0, #40	; 0x28
 8000ef6:	f000 fb6a 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020800 	.word	0x40020800

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <add_siemple_service>:
//custom UUID service
uint8_t SERVICE_UUID[16] = {0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e, 0xe2, 0x11, 0x9e, 0xb1, 0xe0, 0xf2, 0x73, 0xd9};

uint16_t my_service_handle;

tBleStatus add_siemple_service(void){
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af02      	add	r7, sp, #8

	tBleStatus ret;
	Service_UUID_t service_uuid;

	BLUENRG_memcpy(service_uuid.Service_UUID_128, SERVICE_UUID, 16);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <add_siemple_service+0x30>)
 8000f24:	1d3c      	adds	r4, r7, #4
 8000f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//add service
	ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &my_service_handle);
 8000f2c:	1d39      	adds	r1, r7, #4
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <add_siemple_service+0x34>)
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2307      	movs	r3, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	2002      	movs	r0, #2
 8000f38:	f002 fadd 	bl	80034f6 <aci_gatt_add_service>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	75fb      	strb	r3, [r7, #23]


	return ret;
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200007f0 	.word	0x200007f0

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_UART_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_MspInit+0x8c>)
 800101a:	f000 fb53 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f946 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <EXTI0_IRQHandler+0x10>)
 800108e:	f000 faf5 	bl	800167c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000074c 	.word	0x2000074c

0800109c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010a4:	f000 fda8 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010be:	f3af 8000 	nop.w
 80010c2:	4601      	mov	r1, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_read+0x12>
	}

return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e009      	b.n	800110c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdbf 	bl	8000c84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf1      	blt.n	80010f8 <_write+0x12>
	}
	return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001146:	605a      	str	r2, [r3, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_isatty>:

int _isatty(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f002 fec4 	bl	8003f44 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200001a8 	.word	0x200001a8
 80011f0:	20000818 	.word	0x20000818

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001242:	f7ff ffd7 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f002 fe83 	bl	8003f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fd2d 	bl	8000ca8 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800125c:	08005034 	.word	0x08005034
  ldr r2, =_sbss
 8001260:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001264:	20000818 	.word	0x20000818

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f973 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fe58 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f999 	bl	8001606 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f953 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000018 	.word	0x20000018
 8001308:	20000020 	.word	0x20000020
 800130c:	2000001c 	.word	0x2000001c

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000020 	.word	0x20000020
 8001334:	200007f4 	.word	0x200007f4

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200007f4 	.word	0x200007f4

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000020 	.word	0x20000020

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db12      	blt.n	8001470 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	490a      	ldr	r1, [pc, #40]	; (800147c <__NVIC_DisableIRQ+0x44>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	3320      	adds	r3, #32
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146a:	f3bf 8f6f 	isb	sy
}
 800146e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff05 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff1a 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff0d 	bl	80013fc <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff1d 	bl	8001438 <__NVIC_DisableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff94 	bl	800153c <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	460b      	mov	r3, r1
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]
      break;
 800163c:	e002      	b.n	8001644 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
      break;
 8001642:	bf00      	nop
  }

  return status;
 8001644:	7dfb      	ldrb	r3, [r7, #23]
}
 8001646:	4618      	mov	r0, r3
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e003      	b.n	800166e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800166c:	2300      	movs	r3, #0
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2201      	movs	r2, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_EXTI_IRQHandler+0x44>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_EXTI_IRQHandler+0x44>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4798      	blx	r3
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e159      	b.n	8001994 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8148 	bne.w	800198e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	2b02      	cmp	r3, #2
 8001714:	d130      	bne.n	8001778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a2 	beq.w	800198e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a56      	ldr	r2, [pc, #344]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_GPIO_Init+0x2ec>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_GPIO_Init+0x202>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_GPIO_Init+0x2f4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x1fe>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_GPIO_Init+0x2f8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x1fa>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <HAL_GPIO_Init+0x2fc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x1f6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <HAL_GPIO_Init+0x300>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x1f2>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018c6:	2300      	movs	r3, #0
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d8:	4935      	ldr	r1, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x2ec>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_GPIO_Init+0x304>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001934:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001988:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b0f      	cmp	r3, #15
 8001998:	f67f aea2 	bls.w	80016e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e0bb      	b.n	8001b60 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	f040 80ab 	bne.w	8001b5a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a04:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_GPIO_DeInit+0x1ac>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4013      	ands	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_GPIO_DeInit+0x1b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_DeInit+0x96>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_GPIO_DeInit+0x1b4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_DeInit+0x92>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_DeInit+0x1b8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_DeInit+0x8e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_DeInit+0x1bc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_DeInit+0x8a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_DeInit+0x1c0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_DeInit+0x86>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e008      	b.n	8001a64 <HAL_GPIO_DeInit+0x98>
 8001a52:	2307      	movs	r3, #7
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_DeInit+0x98>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_DeInit+0x98>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_DeInit+0x98>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_DeInit+0x98>
 8001a62:	2300      	movs	r3, #0
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d132      	bne.n	8001ada <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a74:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4944      	ldr	r1, [pc, #272]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4941      	ldr	r1, [pc, #260]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	493d      	ldr	r1, [pc, #244]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	493a      	ldr	r1, [pc, #232]	; (8001b90 <HAL_GPIO_DeInit+0x1c4>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001abc:	4a2e      	ldr	r2, [pc, #184]	; (8001b78 <HAL_GPIO_DeInit+0x1ac>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	482a      	ldr	r0, [pc, #168]	; (8001b78 <HAL_GPIO_DeInit+0x1ac>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	08d2      	lsrs	r2, r2, #3
 8001b10:	4019      	ands	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2103      	movs	r1, #3
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f af40 	bls.w	80019e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	619a      	str	r2, [r3, #24]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f806 	bl	8001c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40013c00 	.word	0x40013c00

08001c28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e264      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5e:	4ba3      	ldr	r3, [pc, #652]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d00c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4ba0      	ldr	r3, [pc, #640]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c76:	4b9d      	ldr	r3, [pc, #628]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b99      	ldr	r3, [pc, #612]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05b      	beq.n	8001d48 <HAL_RCC_OscConfig+0x108>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d157      	bne.n	8001d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e23f      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x74>
 8001ca6:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a90      	ldr	r2, [pc, #576]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a8a      	ldr	r2, [pc, #552]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a87      	ldr	r2, [pc, #540]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	4b84      	ldr	r3, [pc, #528]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a83      	ldr	r2, [pc, #524]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b81      	ldr	r3, [pc, #516]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a80      	ldr	r2, [pc, #512]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fb1e 	bl	8001338 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fb1a 	bl	8001338 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e204      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xc0>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb0a 	bl	8001338 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fb06 	bl	8001338 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1f0      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0xe8>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d56:	4b65      	ldr	r3, [pc, #404]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1c4      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4952      	ldr	r1, [pc, #328]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_RCC_OscConfig+0x2b0>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fabf 	bl	8001338 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fabb 	bl	8001338 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1a5      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4940      	ldr	r1, [pc, #256]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x2b0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa9e 	bl	8001338 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fa9a 	bl	8001338 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e184      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d030      	beq.n	8001e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x2b4>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa7e 	bl	8001338 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa7a 	bl	8001338 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e164      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x200>
 8001e5e:	e015      	b.n	8001e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_OscConfig+0x2b4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fa67 	bl	8001338 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fa63 	bl	8001338 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e14d      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a0 	beq.w	8001fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10f      	bne.n	8001eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x2b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d121      	bne.n	8001f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_OscConfig+0x2b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_RCC_OscConfig+0x2b8>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fa29 	bl	8001338 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	42470000 	.word	0x42470000
 8001ef4:	42470e80 	.word	0x42470e80
 8001ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7ff fa1c 	bl	8001338 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e106      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_RCC_OscConfig+0x4e4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
 8001f22:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a80      	ldr	r2, [pc, #512]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	e01c      	b.n	8001f6a <HAL_RCC_OscConfig+0x32a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x312>
 8001f38:	4b7b      	ldr	r3, [pc, #492]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4a7a      	ldr	r2, [pc, #488]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6713      	str	r3, [r2, #112]	; 0x70
 8001f44:	4b78      	ldr	r3, [pc, #480]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a77      	ldr	r2, [pc, #476]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x32a>
 8001f52:	4b75      	ldr	r3, [pc, #468]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a74      	ldr	r2, [pc, #464]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a71      	ldr	r2, [pc, #452]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff f9e1 	bl	8001338 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff f9dd 	bl	8001338 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0c5      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCC_OscConfig+0x33a>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f9cb 	bl	8001338 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff f9c7 	bl	8001338 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0af      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a55      	ldr	r2, [pc, #340]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 809b 	beq.w	800211a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d05c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d141      	bne.n	800207c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x4ec>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f99b 	bl	8001338 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff f997 	bl	8001338 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e081      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	3b01      	subs	r3, #1
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCC_OscConfig+0x4ec>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff f970 	bl	8001338 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff f96c 	bl	8001338 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e056      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x41c>
 800207a:	e04e      	b.n	800211a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_OscConfig+0x4ec>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff f959 	bl	8001338 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff f955 	bl	8001338 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e03f      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x44a>
 80020a8:	e037      	b.n	800211a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e032      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_RCC_OscConfig+0x4e8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d028      	beq.n	8002116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d121      	bne.n	8002116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d11a      	bne.n	8002116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e6:	4013      	ands	r3, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d111      	bne.n	8002116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40007000 	.word	0x40007000
 8002128:	40023800 	.word	0x40023800
 800212c:	42470060 	.word	0x42470060

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0cc      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d90c      	bls.n	800216c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b8      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800218e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	494d      	ldr	r1, [pc, #308]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d044      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d119      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e067      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4934      	ldr	r1, [pc, #208]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7ff f88a 	bl	8001338 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff f886 	bl	8001338 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e04f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d20c      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e032      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4916      	ldr	r1, [pc, #88]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b6:	f000 f821 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	490a      	ldr	r1, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	5ccb      	ldrb	r3, [r1, r3]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ffea 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	08004f74 	.word	0x08004f74
 80022f4:	20000018 	.word	0x20000018
 80022f8:	2000001c 	.word	0x2000001c

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002314:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d00d      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x40>
 8002320:	2b08      	cmp	r3, #8
 8002322:	f200 80bd 	bhi.w	80024a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
 800232a:	2b04      	cmp	r3, #4
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x3a>
 800232e:	e0b7      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002332:	60bb      	str	r3, [r7, #8]
       break;
 8002334:	e0b7      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002336:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002338:	60bb      	str	r3, [r7, #8]
      break;
 800233a:	e0b4      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800233c:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d04d      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	461a      	mov	r2, r3
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	ea02 0800 	and.w	r8, r2, r0
 800236a:	ea03 0901 	and.w	r9, r3, r1
 800236e:	4640      	mov	r0, r8
 8002370:	4649      	mov	r1, r9
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	014b      	lsls	r3, r1, #5
 800237c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002380:	0142      	lsls	r2, r0, #5
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	ebb0 0008 	subs.w	r0, r0, r8
 800238a:	eb61 0109 	sbc.w	r1, r1, r9
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	018b      	lsls	r3, r1, #6
 8002398:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800239c:	0182      	lsls	r2, r0, #6
 800239e:	1a12      	subs	r2, r2, r0
 80023a0:	eb63 0301 	sbc.w	r3, r3, r1
 80023a4:	f04f 0000 	mov.w	r0, #0
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	00d9      	lsls	r1, r3, #3
 80023ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023b2:	00d0      	lsls	r0, r2, #3
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	eb12 0208 	adds.w	r2, r2, r8
 80023bc:	eb43 0309 	adc.w	r3, r3, r9
 80023c0:	f04f 0000 	mov.w	r0, #0
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	0259      	lsls	r1, r3, #9
 80023ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80023ce:	0250      	lsls	r0, r2, #9
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	f7fd ff56 	bl	8000290 <__aeabi_uldivmod>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4613      	mov	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e04a      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	461a      	mov	r2, r3
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	ea02 0400 	and.w	r4, r2, r0
 8002406:	ea03 0501 	and.w	r5, r3, r1
 800240a:	4620      	mov	r0, r4
 800240c:	4629      	mov	r1, r5
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	014b      	lsls	r3, r1, #5
 8002418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800241c:	0142      	lsls	r2, r0, #5
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	1b00      	subs	r0, r0, r4
 8002424:	eb61 0105 	sbc.w	r1, r1, r5
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	018b      	lsls	r3, r1, #6
 8002432:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002436:	0182      	lsls	r2, r0, #6
 8002438:	1a12      	subs	r2, r2, r0
 800243a:	eb63 0301 	sbc.w	r3, r3, r1
 800243e:	f04f 0000 	mov.w	r0, #0
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	00d9      	lsls	r1, r3, #3
 8002448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800244c:	00d0      	lsls	r0, r2, #3
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	1912      	adds	r2, r2, r4
 8002454:	eb45 0303 	adc.w	r3, r5, r3
 8002458:	f04f 0000 	mov.w	r0, #0
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	0299      	lsls	r1, r3, #10
 8002462:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002466:	0290      	lsls	r0, r2, #10
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	461a      	mov	r2, r3
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f7fd ff0a 	bl	8000290 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4613      	mov	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	60bb      	str	r3, [r7, #8]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024a2:	60bb      	str	r3, [r7, #8]
      break;
 80024a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a6:	68bb      	ldr	r3, [r7, #8]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	00f42400 	.word	0x00f42400
 80024bc:	007a1200 	.word	0x007a1200

080024c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000018 	.word	0x20000018

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024dc:	f7ff fff0 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0a9b      	lsrs	r3, r3, #10
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08004f84 	.word	0x08004f84

08002500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002504:	f7ff ffdc 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0b5b      	lsrs	r3, r3, #13
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	4903      	ldr	r1, [pc, #12]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40023800 	.word	0x40023800
 8002524:	08004f84 	.word	0x08004f84

08002528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07b      	b.n	8002632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254a:	d009      	beq.n	8002560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	e005      	b.n	8002560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f85d 	bl	800263a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	ea42 0103 	orr.w	r1, r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0104 	and.w	r1, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f003 0210 	and.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08c      	sub	sp, #48	; 0x30
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800265c:	2301      	movs	r3, #1
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x26>
 8002670:	2302      	movs	r3, #2
 8002672:	e18a      	b.n	800298a <HAL_SPI_TransmitReceive+0x33c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800267c:	f7fe fe5c 	bl	8001338 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800269a:	2b01      	cmp	r3, #1
 800269c:	d00f      	beq.n	80026be <HAL_SPI_TransmitReceive+0x70>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a4:	d107      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x68>
 80026ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d003      	beq.n	80026be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026bc:	e15b      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_SPI_TransmitReceive+0x82>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_TransmitReceive+0x82>
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026d6:	e14e      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d003      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	887a      	ldrh	r2, [r7, #2]
 8002702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d007      	beq.n	8002740 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002748:	d178      	bne.n	800283c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x10a>
 8002752:	8b7b      	ldrh	r3, [r7, #26]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d166      	bne.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	1c9a      	adds	r2, r3, #2
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277c:	e053      	b.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d11b      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x176>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x176>
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d113      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d119      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x1b8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d014      	beq.n	8002806 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	b292      	uxth	r2, r2
 80027e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002802:	2301      	movs	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002806:	f7fe fd97 	bl	8001338 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002812:	429a      	cmp	r2, r3
 8002814:	d807      	bhi.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d003      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002824:	e0a7      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1a6      	bne.n	800277e <HAL_SPI_TransmitReceive+0x130>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1a1      	bne.n	800277e <HAL_SPI_TransmitReceive+0x130>
 800283a:	e07c      	b.n	8002936 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_SPI_TransmitReceive+0x1fc>
 8002844:	8b7b      	ldrh	r3, [r7, #26]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d16b      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	e057      	b.n	8002922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11c      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x26c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d017      	beq.n	80028ba <HAL_SPI_TransmitReceive+0x26c>
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d114      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x2ae>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028f8:	2301      	movs	r3, #1
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028fc:	f7fe fd1c 	bl	8001338 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002908:	429a      	cmp	r2, r3
 800290a:	d803      	bhi.n	8002914 <HAL_SPI_TransmitReceive+0x2c6>
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d102      	bne.n	800291a <HAL_SPI_TransmitReceive+0x2cc>
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002920:	e029      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1a2      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x224>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d19d      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8c0 	bl	8002ac0 <SPI_EndRxTxTransaction>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002952:	e010      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	e000      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800298a:	4618      	mov	r0, r3
 800298c:	3730      	adds	r7, #48	; 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a0:	b2db      	uxtb	r3, r3
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029c0:	f7fe fcba 	bl	8001338 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029d0:	f7fe fcb2 	bl	8001338 <HAL_GetTick>
 80029d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	0d1b      	lsrs	r3, r3, #20
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029e6:	e054      	b.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d050      	beq.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029f0:	f7fe fca2 	bl	8001338 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d902      	bls.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d13d      	bne.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a1e:	d111      	bne.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a28:	d004      	beq.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a32:	d107      	bne.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4c:	d10f      	bne.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e017      	b.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d19b      	bne.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000018 	.word	0x20000018

08002ac0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <SPI_EndRxTxTransaction+0x7c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <SPI_EndRxTxTransaction+0x80>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0d5b      	lsrs	r3, r3, #21
 8002ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aea:	d112      	bne.n	8002b12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff ff5a 	bl	80029b0 <SPI_WaitFlagStateUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e00f      	b.n	8002b32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d0f2      	beq.n	8002b12 <SPI_EndRxTxTransaction+0x52>
 8002b2c:	e000      	b.n	8002b30 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b2e:	bf00      	nop
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000018 	.word	0x20000018
 8002b40:	165e9f81 	.word	0x165e9f81

08002b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e03f      	b.n	8002bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fa1a 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f929 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b08a      	sub	sp, #40	; 0x28
 8002be2:	af02      	add	r7, sp, #8
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d17c      	bne.n	8002cf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_UART_Transmit+0x2c>
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e075      	b.n	8002cfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Transmit+0x3e>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e06e      	b.n	8002cfa <HAL_UART_Transmit+0x11c>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2221      	movs	r2, #33	; 0x21
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c32:	f7fe fb81 	bl	8001338 <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d108      	bne.n	8002c60 <HAL_UART_Transmit+0x82>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	e003      	b.n	8002c68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c70:	e02a      	b.n	8002cc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f840 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e036      	b.n	8002cfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e007      	b.n	8002cba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cf      	bne.n	8002c72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f810 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b090      	sub	sp, #64	; 0x40
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	e050      	b.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d04c      	beq.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d22:	f7fe fb09 	bl	8001338 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d241      	bcs.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d52:	637a      	str	r2, [r7, #52]	; 0x34
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	613b      	str	r3, [r7, #16]
   return(result);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	623a      	str	r2, [r7, #32]
 8002d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	69f9      	ldr	r1, [r7, #28]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d09f      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3740      	adds	r7, #64	; 0x40
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b09f      	sub	sp, #124	; 0x7c
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	ea40 0301 	orr.w	r3, r0, r1
 8002e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e24:	f021 010c 	bic.w	r1, r1, #12
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	6999      	ldr	r1, [r3, #24]
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	ea40 0301 	orr.w	r3, r0, r1
 8002e48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4bc5      	ldr	r3, [pc, #788]	; (8003164 <UART_SetConfig+0x384>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d004      	beq.n	8002e5e <UART_SetConfig+0x7e>
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4bc3      	ldr	r3, [pc, #780]	; (8003168 <UART_SetConfig+0x388>)
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d103      	bne.n	8002e66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e5e:	f7ff fb4f 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 8002e62:	6778      	str	r0, [r7, #116]	; 0x74
 8002e64:	e002      	b.n	8002e6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e66:	f7ff fb37 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8002e6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e74:	f040 80b6 	bne.w	8002fe4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	f04f 0500 	mov.w	r5, #0
 8002e80:	4622      	mov	r2, r4
 8002e82:	462b      	mov	r3, r5
 8002e84:	1891      	adds	r1, r2, r2
 8002e86:	6439      	str	r1, [r7, #64]	; 0x40
 8002e88:	415b      	adcs	r3, r3
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e90:	1912      	adds	r2, r2, r4
 8002e92:	eb45 0303 	adc.w	r3, r5, r3
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	00d9      	lsls	r1, r3, #3
 8002ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea4:	00d0      	lsls	r0, r2, #3
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	1911      	adds	r1, r2, r4
 8002eac:	6639      	str	r1, [r7, #96]	; 0x60
 8002eae:	416b      	adcs	r3, r5
 8002eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ec8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ecc:	f7fd f9e0 	bl	8000290 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4ba5      	ldr	r3, [pc, #660]	; (800316c <UART_SetConfig+0x38c>)
 8002ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	011e      	lsls	r6, r3, #4
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	f04f 0500 	mov.w	r5, #0
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	1891      	adds	r1, r2, r2
 8002eec:	6339      	str	r1, [r7, #48]	; 0x30
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ef6:	1912      	adds	r2, r2, r4
 8002ef8:	eb45 0303 	adc.w	r3, r5, r3
 8002efc:	f04f 0000 	mov.w	r0, #0
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	00d9      	lsls	r1, r3, #3
 8002f06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f0a:	00d0      	lsls	r0, r2, #3
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	1911      	adds	r1, r2, r4
 8002f12:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f14:	416b      	adcs	r3, r5
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f26:	415b      	adcs	r3, r3
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f32:	f7fd f9ad 	bl	8000290 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4b8c      	ldr	r3, [pc, #560]	; (800316c <UART_SetConfig+0x38c>)
 8002f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	2164      	movs	r1, #100	; 0x64
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3332      	adds	r3, #50	; 0x32
 8002f4e:	4a87      	ldr	r2, [pc, #540]	; (800316c <UART_SetConfig+0x38c>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f5c:	441e      	add	r6, r3
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f60:	4618      	mov	r0, r3
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	1894      	adds	r4, r2, r2
 8002f6c:	623c      	str	r4, [r7, #32]
 8002f6e:	415b      	adcs	r3, r3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f76:	1812      	adds	r2, r2, r0
 8002f78:	eb41 0303 	adc.w	r3, r1, r3
 8002f7c:	f04f 0400 	mov.w	r4, #0
 8002f80:	f04f 0500 	mov.w	r5, #0
 8002f84:	00dd      	lsls	r5, r3, #3
 8002f86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f8a:	00d4      	lsls	r4, r2, #3
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	462b      	mov	r3, r5
 8002f90:	1814      	adds	r4, r2, r0
 8002f92:	653c      	str	r4, [r7, #80]	; 0x50
 8002f94:	414b      	adcs	r3, r1
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	1891      	adds	r1, r2, r2
 8002fa4:	61b9      	str	r1, [r7, #24]
 8002fa6:	415b      	adcs	r3, r3
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fb2:	f7fd f96d 	bl	8000290 <__aeabi_uldivmod>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4b6c      	ldr	r3, [pc, #432]	; (800316c <UART_SetConfig+0x38c>)
 8002fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	2164      	movs	r1, #100	; 0x64
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	3332      	adds	r3, #50	; 0x32
 8002fce:	4a67      	ldr	r2, [pc, #412]	; (800316c <UART_SetConfig+0x38c>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	f003 0207 	and.w	r2, r3, #7
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4432      	add	r2, r6
 8002fe0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe2:	e0b9      	b.n	8003158 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	f04f 0500 	mov.w	r5, #0
 8002fec:	4622      	mov	r2, r4
 8002fee:	462b      	mov	r3, r5
 8002ff0:	1891      	adds	r1, r2, r2
 8002ff2:	6139      	str	r1, [r7, #16]
 8002ff4:	415b      	adcs	r3, r3
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ffc:	1912      	adds	r2, r2, r4
 8002ffe:	eb45 0303 	adc.w	r3, r5, r3
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	00d9      	lsls	r1, r3, #3
 800300c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003010:	00d0      	lsls	r0, r2, #3
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	eb12 0804 	adds.w	r8, r2, r4
 800301a:	eb43 0905 	adc.w	r9, r3, r5
 800301e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	008b      	lsls	r3, r1, #2
 8003032:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003036:	0082      	lsls	r2, r0, #2
 8003038:	4640      	mov	r0, r8
 800303a:	4649      	mov	r1, r9
 800303c:	f7fd f928 	bl	8000290 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <UART_SetConfig+0x38c>)
 8003046:	fba3 2302 	umull	r2, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	011e      	lsls	r6, r3, #4
 800304e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003050:	4618      	mov	r0, r3
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	1894      	adds	r4, r2, r2
 800305c:	60bc      	str	r4, [r7, #8]
 800305e:	415b      	adcs	r3, r3
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003066:	1812      	adds	r2, r2, r0
 8003068:	eb41 0303 	adc.w	r3, r1, r3
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	f04f 0500 	mov.w	r5, #0
 8003074:	00dd      	lsls	r5, r3, #3
 8003076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800307a:	00d4      	lsls	r4, r2, #3
 800307c:	4622      	mov	r2, r4
 800307e:	462b      	mov	r3, r5
 8003080:	1814      	adds	r4, r2, r0
 8003082:	64bc      	str	r4, [r7, #72]	; 0x48
 8003084:	414b      	adcs	r3, r1
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030a0:	0082      	lsls	r2, r0, #2
 80030a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030a6:	f7fd f8f3 	bl	8000290 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <UART_SetConfig+0x38c>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	; 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a2a      	ldr	r2, [pc, #168]	; (800316c <UART_SetConfig+0x38c>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ce:	441e      	add	r6, r3
 80030d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d2:	4618      	mov	r0, r3
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	1894      	adds	r4, r2, r2
 80030de:	603c      	str	r4, [r7, #0]
 80030e0:	415b      	adcs	r3, r3
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e8:	1812      	adds	r2, r2, r0
 80030ea:	eb41 0303 	adc.w	r3, r1, r3
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	f04f 0500 	mov.w	r5, #0
 80030f6:	00dd      	lsls	r5, r3, #3
 80030f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030fc:	00d4      	lsls	r4, r2, #3
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	eb12 0a00 	adds.w	sl, r2, r0
 8003106:	eb43 0b01 	adc.w	fp, r3, r1
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	008b      	lsls	r3, r1, #2
 800311e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003122:	0082      	lsls	r2, r0, #2
 8003124:	4650      	mov	r0, sl
 8003126:	4659      	mov	r1, fp
 8003128:	f7fd f8b2 	bl	8000290 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <UART_SetConfig+0x38c>)
 8003132:	fba3 1302 	umull	r1, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2164      	movs	r1, #100	; 0x64
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <UART_SetConfig+0x38c>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4432      	add	r2, r6
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	377c      	adds	r7, #124	; 0x7c
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40011000 	.word	0x40011000
 8003168:	40011400 	.word	0x40011400
 800316c:	51eb851f 	.word	0x51eb851f

08003170 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800317a:	f107 0308 	add.w	r3, r7, #8
 800317e:	2218      	movs	r2, #24
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f000 ff16 	bl	8003fb4 <memset>
  rq.ogf = 0x03;
 8003188:	2303      	movs	r3, #3
 800318a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800318c:	2303      	movs	r3, #3
 800318e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003190:	1dfb      	adds	r3, r7, #7
 8003192:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003194:	2301      	movs	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fc52 	bl	8003a48 <hci_send_req>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	da01      	bge.n	80031ae <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80031aa:	23ff      	movs	r3, #255	; 0xff
 80031ac:	e005      	b.n	80031ba <hci_reset+0x4a>
  if (status) {
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <hci_reset+0x48>
    return status;
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	e000      	b.n	80031ba <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80031c2:	b5b0      	push	{r4, r5, r7, lr}
 80031c4:	b0ce      	sub	sp, #312	; 0x138
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4605      	mov	r5, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	462a      	mov	r2, r5
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	4622      	mov	r2, r4
 80031da:	801a      	strh	r2, [r3, #0]
 80031dc:	1cbb      	adds	r3, r7, #2
 80031de:	4602      	mov	r2, r0
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	1dbb      	adds	r3, r7, #6
 80031e4:	460a      	mov	r2, r1
 80031e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80031f0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80031f4:	3308      	adds	r3, #8
 80031f6:	f107 020c 	add.w	r2, r7, #12
 80031fa:	4413      	add	r3, r2
 80031fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003200:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003204:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003208:	4413      	add	r3, r2
 800320a:	3309      	adds	r3, #9
 800320c:	f107 020c 	add.w	r2, r7, #12
 8003210:	4413      	add	r3, r2
 8003212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003216:	f107 030b 	add.w	r3, r7, #11
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8003224:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003228:	1dfa      	adds	r2, r7, #7
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800322e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003232:	3301      	adds	r3, #1
 8003234:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8003238:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800323c:	1d3a      	adds	r2, r7, #4
 800323e:	8812      	ldrh	r2, [r2, #0]
 8003240:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003244:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003248:	3302      	adds	r3, #2
 800324a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800324e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003252:	1cba      	adds	r2, r7, #2
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800325a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800325e:	3302      	adds	r3, #2
 8003260:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8003264:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003268:	1dba      	adds	r2, r7, #6
 800326a:	7812      	ldrb	r2, [r2, #0]
 800326c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800326e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003272:	3301      	adds	r3, #1
 8003274:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8003278:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800327c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003280:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003282:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003286:	3301      	adds	r3, #1
 8003288:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800328c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003290:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003294:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003296:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800329a:	3301      	adds	r3, #1
 800329c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 80032a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80032a4:	3308      	adds	r3, #8
 80032a6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80032aa:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fe72 	bl	8003f98 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 80032b4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80032b8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80032bc:	4413      	add	r3, r2
 80032be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80032c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80032ca:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80032cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80032d0:	3301      	adds	r3, #1
 80032d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80032d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032da:	3301      	adds	r3, #1
 80032dc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80032e0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fe57 	bl	8003f98 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80032ea:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80032ee:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80032f2:	4413      	add	r3, r2
 80032f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80032f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032fc:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003300:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003302:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003306:	3302      	adds	r3, #2
 8003308:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800330c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003310:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003314:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003316:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800331a:	3302      	adds	r3, #2
 800331c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003320:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003324:	2218      	movs	r2, #24
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fe43 	bl	8003fb4 <memset>
  rq.ogf = 0x3f;
 800332e:	233f      	movs	r3, #63	; 0x3f
 8003330:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003334:	2383      	movs	r3, #131	; 0x83
 8003336:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003342:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003346:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800334a:	f107 030b 	add.w	r3, r7, #11
 800334e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003352:	2301      	movs	r3, #1
 8003354:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003358:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fb72 	bl	8003a48 <hci_send_req>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	da01      	bge.n	800336e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800336a:	23ff      	movs	r3, #255	; 0xff
 800336c:	e009      	b.n	8003382 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 800336e:	f107 030b 	add.w	r3, r7, #11
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <aci_gap_set_discoverable+0x1be>
    return status;
 8003378:	f107 030b 	add.w	r3, r7, #11
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	e000      	b.n	8003382 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003388:	46bd      	mov	sp, r7
 800338a:	bdb0      	pop	{r4, r5, r7, pc}

0800338c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b0cf      	sub	sp, #316	; 0x13c
 8003390:	af00      	add	r7, sp, #0
 8003392:	4604      	mov	r4, r0
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	463a      	mov	r2, r7
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	4622      	mov	r2, r4
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	1dbb      	adds	r3, r7, #6
 80033a4:	4602      	mov	r2, r0
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	1d7b      	adds	r3, r7, #5
 80033aa:	460a      	mov	r2, r1
 80033ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	2207      	movs	r2, #7
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fdf8 	bl	8003fb4 <memset>
  uint8_t index_input = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80033ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033ce:	1dfa      	adds	r2, r7, #7
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80033d4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80033d8:	3301      	adds	r3, #1
 80033da:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80033de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033e2:	1dba      	adds	r2, r7, #6
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80033e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80033ec:	3301      	adds	r3, #1
 80033ee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80033f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033f6:	1d7a      	adds	r2, r7, #5
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80033fc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003400:	3301      	adds	r3, #1
 8003402:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003406:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800340a:	2218      	movs	r2, #24
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fdd0 	bl	8003fb4 <memset>
  rq.ogf = 0x3f;
 8003414:	233f      	movs	r3, #63	; 0x3f
 8003416:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800341a:	238a      	movs	r3, #138	; 0x8a
 800341c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003428:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800342c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003438:	2307      	movs	r3, #7
 800343a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800343e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 faff 	bl	8003a48 <hci_send_req>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	da01      	bge.n	8003454 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003450:	23ff      	movs	r3, #255	; 0xff
 8003452:	e021      	b.n	8003498 <aci_gap_init+0x10c>
  if (resp.Status) {
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <aci_gap_init+0xda>
    return resp.Status;
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	e018      	b.n	8003498 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800346e:	b29a      	uxth	r2, r3
 8003470:	463b      	mov	r3, r7
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800347e:	b29a      	uxth	r2, r3
 8003480:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003484:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800348e:	b29a      	uxth	r2, r3
 8003490:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003494:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}

080034a2 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	2218      	movs	r2, #24
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fd7d 	bl	8003fb4 <memset>
  rq.ogf = 0x3f;
 80034ba:	233f      	movs	r3, #63	; 0x3f
 80034bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80034be:	f240 1301 	movw	r3, #257	; 0x101
 80034c2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fab8 	bl	8003a48 <hci_send_req>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da01      	bge.n	80034e2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80034de:	23ff      	movs	r3, #255	; 0xff
 80034e0:	e005      	b.n	80034ee <aci_gatt_init+0x4c>
  if (status) {
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <aci_gatt_init+0x4a>
    return status;
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	e000      	b.n	80034ee <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80034f6:	b590      	push	{r4, r7, lr}
 80034f8:	b0cf      	sub	sp, #316	; 0x13c
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4604      	mov	r4, r0
 80034fe:	4638      	mov	r0, r7
 8003500:	6001      	str	r1, [r0, #0]
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	4622      	mov	r2, r4
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	1dbb      	adds	r3, r7, #6
 800350e:	4602      	mov	r2, r0
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	1d7b      	adds	r3, r7, #5
 8003514:	460a      	mov	r2, r1
 8003516:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003518:	f107 030c 	add.w	r3, r7, #12
 800351c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d007      	beq.n	8003538 <aci_gatt_add_service+0x42>
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d101      	bne.n	8003534 <aci_gatt_add_service+0x3e>
 8003530:	2311      	movs	r3, #17
 8003532:	e002      	b.n	800353a <aci_gatt_add_service+0x44>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <aci_gatt_add_service+0x44>
 8003538:	2303      	movs	r3, #3
 800353a:	f107 020c 	add.w	r2, r7, #12
 800353e:	4413      	add	r3, r2
 8003540:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003544:	f107 0308 	add.w	r3, r7, #8
 8003548:	2203      	movs	r2, #3
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fd31 	bl	8003fb4 <memset>
  uint8_t index_input = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8003558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800355c:	1dfa      	adds	r2, r7, #7
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003562:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003566:	3301      	adds	r3, #1
 8003568:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800356c:	1dfb      	adds	r3, r7, #7
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <aci_gatt_add_service+0x84>
 8003574:	2b02      	cmp	r3, #2
 8003576:	d004      	beq.n	8003582 <aci_gatt_add_service+0x8c>
 8003578:	e007      	b.n	800358a <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800357a:	2302      	movs	r3, #2
 800357c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003580:	e005      	b.n	800358e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8003582:	2310      	movs	r3, #16
 8003584:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003588:	e001      	b.n	800358e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800358a:	2347      	movs	r3, #71	; 0x47
 800358c:	e05d      	b.n	800364a <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800358e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003592:	1c58      	adds	r0, r3, #1
 8003594:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8003598:	463b      	mov	r3, r7
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	f000 fcfc 	bl	8003f98 <memcpy>
    index_input += size;
 80035a0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80035a4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80035a8:	4413      	add	r3, r2
 80035aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80035ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035b2:	1dba      	adds	r2, r7, #6
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80035b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80035bc:	3301      	adds	r3, #1
 80035be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80035c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035c6:	1d7a      	adds	r2, r7, #5
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80035cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80035d0:	3301      	adds	r3, #1
 80035d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035da:	2218      	movs	r2, #24
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fce8 	bl	8003fb4 <memset>
  rq.ogf = 0x3f;
 80035e4:	233f      	movs	r3, #63	; 0x3f
 80035e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80035ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 80035ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80035f2:	f107 030c 	add.w	r3, r7, #12
 80035f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80035fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80035fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800360a:	2303      	movs	r3, #3
 800360c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fa16 	bl	8003a48 <hci_send_req>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	da01      	bge.n	8003626 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8003622:	23ff      	movs	r3, #255	; 0xff
 8003624:	e011      	b.n	800364a <aci_gatt_add_service+0x154>
  if (resp.Status) {
 8003626:	f107 0308 	add.w	r3, r7, #8
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <aci_gatt_add_service+0x142>
    return resp.Status;
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	e008      	b.n	800364a <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003640:	b29a      	uxth	r2, r3
 8003642:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003646:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}

08003654 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b0cc      	sub	sp, #304	; 0x130
 8003658:	af00      	add	r7, sp, #0
 800365a:	4605      	mov	r5, r0
 800365c:	460c      	mov	r4, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	462a      	mov	r2, r5
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	4622      	mov	r2, r4
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1cfb      	adds	r3, r7, #3
 8003670:	4602      	mov	r2, r0
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	1cbb      	adds	r3, r7, #2
 8003676:	460a      	mov	r2, r1
 8003678:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003682:	f107 030b 	add.w	r3, r7, #11
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8003690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003694:	1dba      	adds	r2, r7, #6
 8003696:	8812      	ldrh	r2, [r2, #0]
 8003698:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800369a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800369e:	3302      	adds	r3, #2
 80036a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80036a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036a8:	1d3a      	adds	r2, r7, #4
 80036aa:	8812      	ldrh	r2, [r2, #0]
 80036ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80036ae:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80036b2:	3302      	adds	r3, #2
 80036b4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80036b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036bc:	1cfa      	adds	r2, r7, #3
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80036c2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80036c6:	3301      	adds	r3, #1
 80036c8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80036cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036d0:	1cba      	adds	r2, r7, #2
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80036d6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80036da:	3301      	adds	r3, #1
 80036dc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80036e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036e4:	1d98      	adds	r0, r3, #6
 80036e6:	1cbb      	adds	r3, r7, #2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036f0:	f000 fc52 	bl	8003f98 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80036f4:	1cbb      	adds	r3, r7, #2
 80036f6:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003702:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003706:	2218      	movs	r2, #24
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fc52 	bl	8003fb4 <memset>
  rq.ogf = 0x3f;
 8003710:	233f      	movs	r3, #63	; 0x3f
 8003712:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8003716:	f44f 7383 	mov.w	r3, #262	; 0x106
 800371a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003726:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800372a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800372e:	f107 030b 	add.w	r3, r7, #11
 8003732:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800373c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f980 	bl	8003a48 <hci_send_req>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	da01      	bge.n	8003752 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800374e:	23ff      	movs	r3, #255	; 0xff
 8003750:	e009      	b.n	8003766 <aci_gatt_update_char_value+0x112>
  if (status) {
 8003752:	f107 030b 	add.w	r3, r7, #11
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <aci_gatt_update_char_value+0x110>
    return status;
 800375c:	f107 030b 	add.w	r3, r7, #11
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	e000      	b.n	8003766 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800376c:	46bd      	mov	sp, r7
 800376e:	bdb0      	pop	{r4, r5, r7, pc}

08003770 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b0cc      	sub	sp, #304	; 0x130
 8003774:	af00      	add	r7, sp, #0
 8003776:	463b      	mov	r3, r7
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	4602      	mov	r2, r0
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	1dbb      	adds	r3, r7, #6
 8003782:	460a      	mov	r2, r1
 8003784:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800378e:	f107 030b 	add.w	r3, r7, #11
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800379c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037a0:	1dfa      	adds	r2, r7, #7
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80037a6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80037aa:	3301      	adds	r3, #1
 80037ac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 80037b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037b4:	1dba      	adds	r2, r7, #6
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80037ba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80037be:	3301      	adds	r3, #1
 80037c0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 80037c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037c8:	1c98      	adds	r0, r3, #2
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	463b      	mov	r3, r7
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	f000 fbe1 	bl	8003f98 <memcpy>
    index_input += Length*sizeof(uint8_t);
 80037d6:	1dbb      	adds	r3, r7, #6
 80037d8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80037e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037e8:	2218      	movs	r2, #24
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fbe1 	bl	8003fb4 <memset>
  rq.ogf = 0x3f;
 80037f2:	233f      	movs	r3, #63	; 0x3f
 80037f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80037f8:	230c      	movs	r3, #12
 80037fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003806:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800380a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800380e:	f107 030b 	add.w	r3, r7, #11
 8003812:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800381c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f910 	bl	8003a48 <hci_send_req>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	da01      	bge.n	8003832 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800382e:	23ff      	movs	r3, #255	; 0xff
 8003830:	e009      	b.n	8003846 <aci_hal_write_config_data+0xd6>
  if (status) {
 8003832:	f107 030b 	add.w	r3, r7, #11
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <aci_hal_write_config_data+0xd4>
    return status;
 800383c:	f107 030b 	add.w	r3, r7, #11
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	e000      	b.n	8003846 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3308      	adds	r3, #8
 800385c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d001      	beq.n	800386a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003866:	2301      	movs	r3, #1
 8003868:	e00c      	b.n	8003884 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3302      	adds	r3, #2
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003878:	3b03      	subs	r3, #3
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800387e:	2302      	movs	r3, #2
 8003880:	e000      	b.n	8003884 <verify_packet+0x34>
  
  return 0;      
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b0a6      	sub	sp, #152	; 0x98
 8003894:	af00      	add	r7, sp, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	4603      	mov	r3, r0
 800389a:	81fb      	strh	r3, [r7, #14]
 800389c:	460b      	mov	r3, r1
 800389e:	81bb      	strh	r3, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80038a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80038a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ac:	b21a      	sxth	r2, r3
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	b21b      	sxth	r3, r3
 80038b4:	4313      	orrs	r3, r2
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80038bc:	7afb      	ldrb	r3, [r7, #11]
 80038be:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80038c0:	2301      	movs	r3, #1
 80038c2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80038c4:	f107 0318 	add.w	r3, r7, #24
 80038c8:	3301      	adds	r3, #1
 80038ca:	461a      	mov	r2, r3
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	8819      	ldrh	r1, [r3, #0]
 80038d2:	789b      	ldrb	r3, [r3, #2]
 80038d4:	8011      	strh	r1, [r2, #0]
 80038d6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	3304      	adds	r3, #4
 80038de:	7afa      	ldrb	r2, [r7, #11]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb58 	bl	8003f98 <memcpy>
  
  if (hciContext.io.Send)
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <send_cmd+0x7c>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <send_cmd+0x7c>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	7afa      	ldrb	r2, [r7, #11]
 80038f6:	b292      	uxth	r2, r2
 80038f8:	3204      	adds	r2, #4
 80038fa:	b291      	uxth	r1, r2
 80038fc:	f107 0218 	add.w	r2, r7, #24
 8003900:	4610      	mov	r0, r2
 8003902:	4798      	blx	r3
  }
}
 8003904:	bf00      	nop
 8003906:	3798      	adds	r7, #152	; 0x98
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000724 	.word	0x20000724

08003910 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800391a:	e00a      	b.n	8003932 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	4619      	mov	r1, r3
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f000 fabe 	bl	8003ea4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fa25 	bl	8003d7c <list_insert_head>
  while (!list_is_empty(src_list))
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	f000 fa00 	bl	8003d38 <list_is_empty>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ee      	beq.n	800391c <move_list+0xc>
  }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800394e:	e009      	b.n	8003964 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	4619      	mov	r1, r3
 8003954:	4809      	ldr	r0, [pc, #36]	; (800397c <free_event_list+0x34>)
 8003956:	f000 fa7e 	bl	8003e56 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4619      	mov	r1, r3
 800395e:	4808      	ldr	r0, [pc, #32]	; (8003980 <free_event_list+0x38>)
 8003960:	f000 fa32 	bl	8003dc8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003964:	4806      	ldr	r0, [pc, #24]	; (8003980 <free_event_list+0x38>)
 8003966:	f000 fac4 	bl	8003ef2 <list_get_size>
 800396a:	4603      	mov	r3, r0
 800396c:	2b04      	cmp	r3, #4
 800396e:	ddef      	ble.n	8003950 <free_event_list+0x8>
  }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000800 	.word	0x20000800
 8003980:	200007f8 	.word	0x200007f8

08003984 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <hci_init+0x74>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <hci_init+0x78>)
 800399c:	f000 f9bc 	bl	8003d18 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80039a0:	4817      	ldr	r0, [pc, #92]	; (8003a00 <hci_init+0x7c>)
 80039a2:	f000 f9b9 	bl	8003d18 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80039a6:	f7fc ff87 	bl	80008b8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	e00c      	b.n	80039ca <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	228c      	movs	r2, #140	; 0x8c
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <hci_init+0x80>)
 80039ba:	4413      	add	r3, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	480f      	ldr	r0, [pc, #60]	; (80039fc <hci_init+0x78>)
 80039c0:	f000 fa02 	bl	8003dc8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	3301      	adds	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d9ef      	bls.n	80039b0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <hci_init+0x74>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <hci_init+0x5c>
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <hci_init+0x74>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2000      	movs	r0, #0
 80039de:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <hci_init+0x74>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <hci_init+0x6a>
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <hci_init+0x74>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4798      	blx	r3
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000724 	.word	0x20000724
 80039fc:	200007f8 	.word	0x200007f8
 8003a00:	20000800 	.word	0x20000800
 8003a04:	200001ac 	.word	0x200001ac

08003a08 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <hci_register_io_bus+0x3c>)
 8003a16:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <hci_register_io_bus+0x3c>)
 8003a1e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <hci_register_io_bus+0x3c>)
 8003a26:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <hci_register_io_bus+0x3c>)
 8003a2e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a03      	ldr	r2, [pc, #12]	; (8003a44 <hci_register_io_bus+0x3c>)
 8003a36:	6093      	str	r3, [r2, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000724 	.word	0x20000724

08003a48 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	; 0x38
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	885b      	ldrh	r3, [r3, #2]
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a5e:	b21a      	sxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	029b      	lsls	r3, r3, #10
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b21b      	sxth	r3, r3
 8003a6c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f94e 	bl	8003d18 <list_init_head>

  free_event_list();
 8003a7c:	f7ff ff64 	bl	8003948 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8818      	ldrh	r0, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8859      	ldrh	r1, [r3, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f7ff fefd 	bl	8003890 <send_cmd>
  
  if (async)
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <hci_send_req+0x58>
  {
    return 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e0e5      	b.n	8003c6c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7fd fc4a 	bl	8001338 <HAL_GetTick>
 8003aa4:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003aa6:	f7fd fc47 	bl	8001338 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab4:	f200 80b6 	bhi.w	8003c24 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003ab8:	486e      	ldr	r0, [pc, #440]	; (8003c74 <hci_send_req+0x22c>)
 8003aba:	f000 f93d 	bl	8003d38 <list_is_empty>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d000      	beq.n	8003ac6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003ac4:	e7ef      	b.n	8003aa6 <hci_send_req+0x5e>
      {
        break;
 8003ac6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	4869      	ldr	r0, [pc, #420]	; (8003c74 <hci_send_req+0x22c>)
 8003ad0:	f000 f9c1 	bl	8003e56 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d17b      	bne.n	8003bda <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	3308      	adds	r3, #8
 8003aec:	3303      	adds	r3, #3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003af6:	3b03      	subs	r3, #3
 8003af8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b3e      	cmp	r3, #62	; 0x3e
 8003b00:	d04d      	beq.n	8003b9e <hci_send_req+0x156>
 8003b02:	2b3e      	cmp	r3, #62	; 0x3e
 8003b04:	dc6b      	bgt.n	8003bde <hci_send_req+0x196>
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	f000 808e 	beq.w	8003c28 <hci_send_req+0x1e0>
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	dc66      	bgt.n	8003bde <hci_send_req+0x196>
 8003b10:	2b0e      	cmp	r3, #14
 8003b12:	d024      	beq.n	8003b5e <hci_send_req+0x116>
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	d162      	bne.n	8003bde <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	885b      	ldrh	r3, [r3, #2]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003b24:	429a      	cmp	r2, r3
 8003b26:	f040 8081 	bne.w	8003c2c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d004      	beq.n	8003b3c <hci_send_req+0xf4>
          if (cs->status) {
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d053      	beq.n	8003be2 <hci_send_req+0x19a>
            goto failed;
 8003b3a:	e07a      	b.n	8003c32 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	bf28      	it	cs
 8003b46:	461a      	movcs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6918      	ldr	r0, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b58:	f000 fa1e 	bl	8003f98 <memcpy>
        goto done;
 8003b5c:	e07a      	b.n	8003c54 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d15f      	bne.n	8003c30 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	3303      	adds	r3, #3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	3b03      	subs	r3, #3
 8003b7a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	bf28      	it	cs
 8003b86:	461a      	movcs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6918      	ldr	r0, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	461a      	mov	r2, r3
 8003b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b98:	f000 f9fe 	bl	8003f98 <memcpy>
        goto done;
 8003b9c:	e05a      	b.n	8003c54 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d11a      	bne.n	8003be6 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	bf28      	it	cs
 8003bc0:	461a      	movcs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6918      	ldr	r0, [r3, #16]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	1c59      	adds	r1, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 f9e0 	bl	8003f98 <memcpy>
        goto done;
 8003bd8:	e03c      	b.n	8003c54 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8003bda:	bf00      	nop
 8003bdc:	e004      	b.n	8003be8 <hci_send_req+0x1a0>
        break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <hci_send_req+0x1a0>
          break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <hci_send_req+0x1a0>
          break;
 8003be6:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003be8:	4823      	ldr	r0, [pc, #140]	; (8003c78 <hci_send_req+0x230>)
 8003bea:	f000 f8a5 	bl	8003d38 <list_is_empty>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <hci_send_req+0x1c8>
 8003bf4:	481f      	ldr	r0, [pc, #124]	; (8003c74 <hci_send_req+0x22c>)
 8003bf6:	f000 f89f 	bl	8003d38 <list_is_empty>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4619      	mov	r1, r3
 8003c04:	481c      	ldr	r0, [pc, #112]	; (8003c78 <hci_send_req+0x230>)
 8003c06:	f000 f8df 	bl	8003dc8 <list_insert_tail>
      hciReadPacket=NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e008      	b.n	8003c22 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f8d5 	bl	8003dc8 <list_insert_tail>
      hciReadPacket=NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  {
 8003c22:	e73d      	b.n	8003aa0 <hci_send_req+0x58>
        goto failed;
 8003c24:	bf00      	nop
 8003c26:	e004      	b.n	8003c32 <hci_send_req+0x1ea>
        goto failed;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <hci_send_req+0x1ea>
          goto failed;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <hci_send_req+0x1ea>
          goto failed;
 8003c30:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480e      	ldr	r0, [pc, #56]	; (8003c78 <hci_send_req+0x230>)
 8003c3e:	f000 f89d 	bl	8003d7c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	4619      	mov	r1, r3
 8003c48:	480a      	ldr	r0, [pc, #40]	; (8003c74 <hci_send_req+0x22c>)
 8003c4a:	f7ff fe61 	bl	8003910 <move_list>

  return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	e00b      	b.n	8003c6c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4807      	ldr	r0, [pc, #28]	; (8003c78 <hci_send_req+0x230>)
 8003c5a:	f000 f88f 	bl	8003d7c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	4619      	mov	r1, r3
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <hci_send_req+0x22c>)
 8003c66:	f7ff fe53 	bl	8003910 <move_list>

  return 0;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3738      	adds	r7, #56	; 0x38
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000800 	.word	0x20000800
 8003c78:	200007f8 	.word	0x200007f8

08003c7c <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003c8c:	481f      	ldr	r0, [pc, #124]	; (8003d0c <hci_notify_asynch_evt+0x90>)
 8003c8e:	f000 f853 	bl	8003d38 <list_is_empty>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d132      	bne.n	8003cfe <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	481b      	ldr	r0, [pc, #108]	; (8003d0c <hci_notify_asynch_evt+0x90>)
 8003ca0:	f000 f8d9 	bl	8003e56 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <hci_notify_asynch_evt+0x94>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d02a      	beq.n	8003d02 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003cac:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <hci_notify_asynch_evt+0x94>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4798      	blx	r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d016      	beq.n	8003cf2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	7cfa      	ldrb	r2, [r7, #19]
 8003cc8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fdbe 	bl	8003850 <verify_packet>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <hci_notify_asynch_evt+0x98>)
 8003ce0:	f000 f872 	bl	8003dc8 <list_insert_tail>
 8003ce4:	e00d      	b.n	8003d02 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4808      	ldr	r0, [pc, #32]	; (8003d0c <hci_notify_asynch_evt+0x90>)
 8003cec:	f000 f846 	bl	8003d7c <list_insert_head>
 8003cf0:	e007      	b.n	8003d02 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4805      	ldr	r0, [pc, #20]	; (8003d0c <hci_notify_asynch_evt+0x90>)
 8003cf8:	f000 f840 	bl	8003d7c <list_insert_head>
 8003cfc:	e001      	b.n	8003d02 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003d02:	697b      	ldr	r3, [r7, #20]
  
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200007f8 	.word	0x200007f8
 8003d10:	20000724 	.word	0x20000724
 8003d14:	20000800 	.word	0x20000800

08003d18 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	605a      	str	r2, [r3, #4]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d46:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4a:	b672      	cpsid	i
}
 8003d4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d102      	bne.n	8003d5e <list_is_empty+0x26>
  {
    return_value = 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
 8003d5c:	e001      	b.n	8003d62 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f383 8810 	msr	PRIMASK, r3
}
 8003d6c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003d8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d90:	b672      	cpsid	i
}
 8003d92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f383 8810 	msr	PRIMASK, r3
}
 8003dba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ddc:	b672      	cpsid	i
}
 8003dde:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e22:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e26:	b672      	cpsid	i
}
 8003e28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6852      	ldr	r2, [r2, #4]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e60:	f3ef 8310 	mrs	r3, PRIMASK
 8003e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e66:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003e68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e6a:	b672      	cpsid	i
}
 8003e6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffca 	bl	8003e14 <list_remove_node>
  (*node)->next = NULL;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f383 8810 	msr	PRIMASK, r3
}
 8003e9a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eae:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb8:	b672      	cpsid	i
}
 8003eba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ffa3 	bl	8003e14 <list_remove_node>
  (*node)->next = NULL;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b089      	sub	sp, #36	; 0x24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  int size = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efe:	f3ef 8310 	mrs	r3, PRIMASK
 8003f02:	613b      	str	r3, [r7, #16]
  return(result);
 8003f04:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f08:	b672      	cpsid	i
}
 8003f0a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003f12:	e005      	b.n	8003f20 <list_get_size+0x2e>
  {
    size++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d1f5      	bne.n	8003f14 <list_get_size+0x22>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8003f34:	69fb      	ldr	r3, [r7, #28]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <__errno>:
 8003f44:	4b01      	ldr	r3, [pc, #4]	; (8003f4c <__errno+0x8>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000024 	.word	0x20000024

08003f50 <__libc_init_array>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4d0d      	ldr	r5, [pc, #52]	; (8003f88 <__libc_init_array+0x38>)
 8003f54:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <__libc_init_array+0x3c>)
 8003f56:	1b64      	subs	r4, r4, r5
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	2600      	movs	r6, #0
 8003f5c:	42a6      	cmp	r6, r4
 8003f5e:	d109      	bne.n	8003f74 <__libc_init_array+0x24>
 8003f60:	4d0b      	ldr	r5, [pc, #44]	; (8003f90 <__libc_init_array+0x40>)
 8003f62:	4c0c      	ldr	r4, [pc, #48]	; (8003f94 <__libc_init_array+0x44>)
 8003f64:	f000 ff84 	bl	8004e70 <_init>
 8003f68:	1b64      	subs	r4, r4, r5
 8003f6a:	10a4      	asrs	r4, r4, #2
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	42a6      	cmp	r6, r4
 8003f70:	d105      	bne.n	8003f7e <__libc_init_array+0x2e>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f78:	4798      	blx	r3
 8003f7a:	3601      	adds	r6, #1
 8003f7c:	e7ee      	b.n	8003f5c <__libc_init_array+0xc>
 8003f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f82:	4798      	blx	r3
 8003f84:	3601      	adds	r6, #1
 8003f86:	e7f2      	b.n	8003f6e <__libc_init_array+0x1e>
 8003f88:	0800502c 	.word	0x0800502c
 8003f8c:	0800502c 	.word	0x0800502c
 8003f90:	0800502c 	.word	0x0800502c
 8003f94:	08005030 	.word	0x08005030

08003f98 <memcpy>:
 8003f98:	440a      	add	r2, r1
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fa0:	d100      	bne.n	8003fa4 <memcpy+0xc>
 8003fa2:	4770      	bx	lr
 8003fa4:	b510      	push	{r4, lr}
 8003fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fae:	4291      	cmp	r1, r2
 8003fb0:	d1f9      	bne.n	8003fa6 <memcpy+0xe>
 8003fb2:	bd10      	pop	{r4, pc}

08003fb4 <memset>:
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <iprintf>:
 8003fc4:	b40f      	push	{r0, r1, r2, r3}
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <iprintf+0x2c>)
 8003fc8:	b513      	push	{r0, r1, r4, lr}
 8003fca:	681c      	ldr	r4, [r3, #0]
 8003fcc:	b124      	cbz	r4, 8003fd8 <iprintf+0x14>
 8003fce:	69a3      	ldr	r3, [r4, #24]
 8003fd0:	b913      	cbnz	r3, 8003fd8 <iprintf+0x14>
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 f866 	bl	80040a4 <__sinit>
 8003fd8:	ab05      	add	r3, sp, #20
 8003fda:	9a04      	ldr	r2, [sp, #16]
 8003fdc:	68a1      	ldr	r1, [r4, #8]
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f000 f983 	bl	80042ec <_vfiprintf_r>
 8003fe6:	b002      	add	sp, #8
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fec:	b004      	add	sp, #16
 8003fee:	4770      	bx	lr
 8003ff0:	20000024 	.word	0x20000024

08003ff4 <std>:
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8003ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004002:	6083      	str	r3, [r0, #8]
 8004004:	8181      	strh	r1, [r0, #12]
 8004006:	6643      	str	r3, [r0, #100]	; 0x64
 8004008:	81c2      	strh	r2, [r0, #14]
 800400a:	6183      	str	r3, [r0, #24]
 800400c:	4619      	mov	r1, r3
 800400e:	2208      	movs	r2, #8
 8004010:	305c      	adds	r0, #92	; 0x5c
 8004012:	f7ff ffcf 	bl	8003fb4 <memset>
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <std+0x38>)
 8004018:	6263      	str	r3, [r4, #36]	; 0x24
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <std+0x3c>)
 800401c:	62a3      	str	r3, [r4, #40]	; 0x28
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <std+0x40>)
 8004020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <std+0x44>)
 8004024:	6224      	str	r4, [r4, #32]
 8004026:	6323      	str	r3, [r4, #48]	; 0x30
 8004028:	bd10      	pop	{r4, pc}
 800402a:	bf00      	nop
 800402c:	08004895 	.word	0x08004895
 8004030:	080048b7 	.word	0x080048b7
 8004034:	080048ef 	.word	0x080048ef
 8004038:	08004913 	.word	0x08004913

0800403c <_cleanup_r>:
 800403c:	4901      	ldr	r1, [pc, #4]	; (8004044 <_cleanup_r+0x8>)
 800403e:	f000 b8af 	b.w	80041a0 <_fwalk_reent>
 8004042:	bf00      	nop
 8004044:	08004bed 	.word	0x08004bed

08004048 <__sfmoreglue>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	1e4a      	subs	r2, r1, #1
 800404c:	2568      	movs	r5, #104	; 0x68
 800404e:	4355      	muls	r5, r2
 8004050:	460e      	mov	r6, r1
 8004052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004056:	f000 f8c5 	bl	80041e4 <_malloc_r>
 800405a:	4604      	mov	r4, r0
 800405c:	b140      	cbz	r0, 8004070 <__sfmoreglue+0x28>
 800405e:	2100      	movs	r1, #0
 8004060:	e9c0 1600 	strd	r1, r6, [r0]
 8004064:	300c      	adds	r0, #12
 8004066:	60a0      	str	r0, [r4, #8]
 8004068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800406c:	f7ff ffa2 	bl	8003fb4 <memset>
 8004070:	4620      	mov	r0, r4
 8004072:	bd70      	pop	{r4, r5, r6, pc}

08004074 <__sfp_lock_acquire>:
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <__sfp_lock_acquire+0x8>)
 8004076:	f000 b8b3 	b.w	80041e0 <__retarget_lock_acquire_recursive>
 800407a:	bf00      	nop
 800407c:	20000810 	.word	0x20000810

08004080 <__sfp_lock_release>:
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <__sfp_lock_release+0x8>)
 8004082:	f000 b8ae 	b.w	80041e2 <__retarget_lock_release_recursive>
 8004086:	bf00      	nop
 8004088:	20000810 	.word	0x20000810

0800408c <__sinit_lock_acquire>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__sinit_lock_acquire+0x8>)
 800408e:	f000 b8a7 	b.w	80041e0 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	2000080b 	.word	0x2000080b

08004098 <__sinit_lock_release>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__sinit_lock_release+0x8>)
 800409a:	f000 b8a2 	b.w	80041e2 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	2000080b 	.word	0x2000080b

080040a4 <__sinit>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	f7ff fff0 	bl	800408c <__sinit_lock_acquire>
 80040ac:	69a3      	ldr	r3, [r4, #24]
 80040ae:	b11b      	cbz	r3, 80040b8 <__sinit+0x14>
 80040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b4:	f7ff bff0 	b.w	8004098 <__sinit_lock_release>
 80040b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040bc:	6523      	str	r3, [r4, #80]	; 0x50
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <__sinit+0x68>)
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <__sinit+0x6c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	bf04      	itt	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	61a3      	streq	r3, [r4, #24]
 80040ce:	4620      	mov	r0, r4
 80040d0:	f000 f820 	bl	8004114 <__sfp>
 80040d4:	6060      	str	r0, [r4, #4]
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 f81c 	bl	8004114 <__sfp>
 80040dc:	60a0      	str	r0, [r4, #8]
 80040de:	4620      	mov	r0, r4
 80040e0:	f000 f818 	bl	8004114 <__sfp>
 80040e4:	2200      	movs	r2, #0
 80040e6:	60e0      	str	r0, [r4, #12]
 80040e8:	2104      	movs	r1, #4
 80040ea:	6860      	ldr	r0, [r4, #4]
 80040ec:	f7ff ff82 	bl	8003ff4 <std>
 80040f0:	68a0      	ldr	r0, [r4, #8]
 80040f2:	2201      	movs	r2, #1
 80040f4:	2109      	movs	r1, #9
 80040f6:	f7ff ff7d 	bl	8003ff4 <std>
 80040fa:	68e0      	ldr	r0, [r4, #12]
 80040fc:	2202      	movs	r2, #2
 80040fe:	2112      	movs	r1, #18
 8004100:	f7ff ff78 	bl	8003ff4 <std>
 8004104:	2301      	movs	r3, #1
 8004106:	61a3      	str	r3, [r4, #24]
 8004108:	e7d2      	b.n	80040b0 <__sinit+0xc>
 800410a:	bf00      	nop
 800410c:	08004f8c 	.word	0x08004f8c
 8004110:	0800403d 	.word	0x0800403d

08004114 <__sfp>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	4607      	mov	r7, r0
 8004118:	f7ff ffac 	bl	8004074 <__sfp_lock_acquire>
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <__sfp+0x84>)
 800411e:	681e      	ldr	r6, [r3, #0]
 8004120:	69b3      	ldr	r3, [r6, #24]
 8004122:	b913      	cbnz	r3, 800412a <__sfp+0x16>
 8004124:	4630      	mov	r0, r6
 8004126:	f7ff ffbd 	bl	80040a4 <__sinit>
 800412a:	3648      	adds	r6, #72	; 0x48
 800412c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004130:	3b01      	subs	r3, #1
 8004132:	d503      	bpl.n	800413c <__sfp+0x28>
 8004134:	6833      	ldr	r3, [r6, #0]
 8004136:	b30b      	cbz	r3, 800417c <__sfp+0x68>
 8004138:	6836      	ldr	r6, [r6, #0]
 800413a:	e7f7      	b.n	800412c <__sfp+0x18>
 800413c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004140:	b9d5      	cbnz	r5, 8004178 <__sfp+0x64>
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <__sfp+0x88>)
 8004144:	60e3      	str	r3, [r4, #12]
 8004146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800414a:	6665      	str	r5, [r4, #100]	; 0x64
 800414c:	f000 f847 	bl	80041de <__retarget_lock_init_recursive>
 8004150:	f7ff ff96 	bl	8004080 <__sfp_lock_release>
 8004154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800415c:	6025      	str	r5, [r4, #0]
 800415e:	61a5      	str	r5, [r4, #24]
 8004160:	2208      	movs	r2, #8
 8004162:	4629      	mov	r1, r5
 8004164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004168:	f7ff ff24 	bl	8003fb4 <memset>
 800416c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004174:	4620      	mov	r0, r4
 8004176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004178:	3468      	adds	r4, #104	; 0x68
 800417a:	e7d9      	b.n	8004130 <__sfp+0x1c>
 800417c:	2104      	movs	r1, #4
 800417e:	4638      	mov	r0, r7
 8004180:	f7ff ff62 	bl	8004048 <__sfmoreglue>
 8004184:	4604      	mov	r4, r0
 8004186:	6030      	str	r0, [r6, #0]
 8004188:	2800      	cmp	r0, #0
 800418a:	d1d5      	bne.n	8004138 <__sfp+0x24>
 800418c:	f7ff ff78 	bl	8004080 <__sfp_lock_release>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	e7ee      	b.n	8004174 <__sfp+0x60>
 8004196:	bf00      	nop
 8004198:	08004f8c 	.word	0x08004f8c
 800419c:	ffff0001 	.word	0xffff0001

080041a0 <_fwalk_reent>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4606      	mov	r6, r0
 80041a6:	4688      	mov	r8, r1
 80041a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041ac:	2700      	movs	r7, #0
 80041ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b2:	f1b9 0901 	subs.w	r9, r9, #1
 80041b6:	d505      	bpl.n	80041c4 <_fwalk_reent+0x24>
 80041b8:	6824      	ldr	r4, [r4, #0]
 80041ba:	2c00      	cmp	r4, #0
 80041bc:	d1f7      	bne.n	80041ae <_fwalk_reent+0xe>
 80041be:	4638      	mov	r0, r7
 80041c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c4:	89ab      	ldrh	r3, [r5, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d907      	bls.n	80041da <_fwalk_reent+0x3a>
 80041ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041ce:	3301      	adds	r3, #1
 80041d0:	d003      	beq.n	80041da <_fwalk_reent+0x3a>
 80041d2:	4629      	mov	r1, r5
 80041d4:	4630      	mov	r0, r6
 80041d6:	47c0      	blx	r8
 80041d8:	4307      	orrs	r7, r0
 80041da:	3568      	adds	r5, #104	; 0x68
 80041dc:	e7e9      	b.n	80041b2 <_fwalk_reent+0x12>

080041de <__retarget_lock_init_recursive>:
 80041de:	4770      	bx	lr

080041e0 <__retarget_lock_acquire_recursive>:
 80041e0:	4770      	bx	lr

080041e2 <__retarget_lock_release_recursive>:
 80041e2:	4770      	bx	lr

080041e4 <_malloc_r>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	1ccd      	adds	r5, r1, #3
 80041e8:	f025 0503 	bic.w	r5, r5, #3
 80041ec:	3508      	adds	r5, #8
 80041ee:	2d0c      	cmp	r5, #12
 80041f0:	bf38      	it	cc
 80041f2:	250c      	movcc	r5, #12
 80041f4:	2d00      	cmp	r5, #0
 80041f6:	4606      	mov	r6, r0
 80041f8:	db01      	blt.n	80041fe <_malloc_r+0x1a>
 80041fa:	42a9      	cmp	r1, r5
 80041fc:	d903      	bls.n	8004206 <_malloc_r+0x22>
 80041fe:	230c      	movs	r3, #12
 8004200:	6033      	str	r3, [r6, #0]
 8004202:	2000      	movs	r0, #0
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004206:	f000 fda3 	bl	8004d50 <__malloc_lock>
 800420a:	4921      	ldr	r1, [pc, #132]	; (8004290 <_malloc_r+0xac>)
 800420c:	680a      	ldr	r2, [r1, #0]
 800420e:	4614      	mov	r4, r2
 8004210:	b99c      	cbnz	r4, 800423a <_malloc_r+0x56>
 8004212:	4f20      	ldr	r7, [pc, #128]	; (8004294 <_malloc_r+0xb0>)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	b923      	cbnz	r3, 8004222 <_malloc_r+0x3e>
 8004218:	4621      	mov	r1, r4
 800421a:	4630      	mov	r0, r6
 800421c:	f000 fb2a 	bl	8004874 <_sbrk_r>
 8004220:	6038      	str	r0, [r7, #0]
 8004222:	4629      	mov	r1, r5
 8004224:	4630      	mov	r0, r6
 8004226:	f000 fb25 	bl	8004874 <_sbrk_r>
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d123      	bne.n	8004276 <_malloc_r+0x92>
 800422e:	230c      	movs	r3, #12
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	4630      	mov	r0, r6
 8004234:	f000 fd92 	bl	8004d5c <__malloc_unlock>
 8004238:	e7e3      	b.n	8004202 <_malloc_r+0x1e>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	1b5b      	subs	r3, r3, r5
 800423e:	d417      	bmi.n	8004270 <_malloc_r+0x8c>
 8004240:	2b0b      	cmp	r3, #11
 8004242:	d903      	bls.n	800424c <_malloc_r+0x68>
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	441c      	add	r4, r3
 8004248:	6025      	str	r5, [r4, #0]
 800424a:	e004      	b.n	8004256 <_malloc_r+0x72>
 800424c:	6863      	ldr	r3, [r4, #4]
 800424e:	42a2      	cmp	r2, r4
 8004250:	bf0c      	ite	eq
 8004252:	600b      	streq	r3, [r1, #0]
 8004254:	6053      	strne	r3, [r2, #4]
 8004256:	4630      	mov	r0, r6
 8004258:	f000 fd80 	bl	8004d5c <__malloc_unlock>
 800425c:	f104 000b 	add.w	r0, r4, #11
 8004260:	1d23      	adds	r3, r4, #4
 8004262:	f020 0007 	bic.w	r0, r0, #7
 8004266:	1ac2      	subs	r2, r0, r3
 8004268:	d0cc      	beq.n	8004204 <_malloc_r+0x20>
 800426a:	1a1b      	subs	r3, r3, r0
 800426c:	50a3      	str	r3, [r4, r2]
 800426e:	e7c9      	b.n	8004204 <_malloc_r+0x20>
 8004270:	4622      	mov	r2, r4
 8004272:	6864      	ldr	r4, [r4, #4]
 8004274:	e7cc      	b.n	8004210 <_malloc_r+0x2c>
 8004276:	1cc4      	adds	r4, r0, #3
 8004278:	f024 0403 	bic.w	r4, r4, #3
 800427c:	42a0      	cmp	r0, r4
 800427e:	d0e3      	beq.n	8004248 <_malloc_r+0x64>
 8004280:	1a21      	subs	r1, r4, r0
 8004282:	4630      	mov	r0, r6
 8004284:	f000 faf6 	bl	8004874 <_sbrk_r>
 8004288:	3001      	adds	r0, #1
 800428a:	d1dd      	bne.n	8004248 <_malloc_r+0x64>
 800428c:	e7cf      	b.n	800422e <_malloc_r+0x4a>
 800428e:	bf00      	nop
 8004290:	20000744 	.word	0x20000744
 8004294:	20000748 	.word	0x20000748

08004298 <__sfputc_r>:
 8004298:	6893      	ldr	r3, [r2, #8]
 800429a:	3b01      	subs	r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	b410      	push	{r4}
 80042a0:	6093      	str	r3, [r2, #8]
 80042a2:	da08      	bge.n	80042b6 <__sfputc_r+0x1e>
 80042a4:	6994      	ldr	r4, [r2, #24]
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	db01      	blt.n	80042ae <__sfputc_r+0x16>
 80042aa:	290a      	cmp	r1, #10
 80042ac:	d103      	bne.n	80042b6 <__sfputc_r+0x1e>
 80042ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b2:	f000 bb33 	b.w	800491c <__swbuf_r>
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	1c58      	adds	r0, r3, #1
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	7019      	strb	r1, [r3, #0]
 80042be:	4608      	mov	r0, r1
 80042c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <__sfputs_r>:
 80042c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c8:	4606      	mov	r6, r0
 80042ca:	460f      	mov	r7, r1
 80042cc:	4614      	mov	r4, r2
 80042ce:	18d5      	adds	r5, r2, r3
 80042d0:	42ac      	cmp	r4, r5
 80042d2:	d101      	bne.n	80042d8 <__sfputs_r+0x12>
 80042d4:	2000      	movs	r0, #0
 80042d6:	e007      	b.n	80042e8 <__sfputs_r+0x22>
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	463a      	mov	r2, r7
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff ffda 	bl	8004298 <__sfputc_r>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d1f3      	bne.n	80042d0 <__sfputs_r+0xa>
 80042e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042ec <_vfiprintf_r>:
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	460d      	mov	r5, r1
 80042f2:	b09d      	sub	sp, #116	; 0x74
 80042f4:	4614      	mov	r4, r2
 80042f6:	4698      	mov	r8, r3
 80042f8:	4606      	mov	r6, r0
 80042fa:	b118      	cbz	r0, 8004304 <_vfiprintf_r+0x18>
 80042fc:	6983      	ldr	r3, [r0, #24]
 80042fe:	b90b      	cbnz	r3, 8004304 <_vfiprintf_r+0x18>
 8004300:	f7ff fed0 	bl	80040a4 <__sinit>
 8004304:	4b89      	ldr	r3, [pc, #548]	; (800452c <_vfiprintf_r+0x240>)
 8004306:	429d      	cmp	r5, r3
 8004308:	d11b      	bne.n	8004342 <_vfiprintf_r+0x56>
 800430a:	6875      	ldr	r5, [r6, #4]
 800430c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800430e:	07d9      	lsls	r1, r3, #31
 8004310:	d405      	bmi.n	800431e <_vfiprintf_r+0x32>
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	059a      	lsls	r2, r3, #22
 8004316:	d402      	bmi.n	800431e <_vfiprintf_r+0x32>
 8004318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800431a:	f7ff ff61 	bl	80041e0 <__retarget_lock_acquire_recursive>
 800431e:	89ab      	ldrh	r3, [r5, #12]
 8004320:	071b      	lsls	r3, r3, #28
 8004322:	d501      	bpl.n	8004328 <_vfiprintf_r+0x3c>
 8004324:	692b      	ldr	r3, [r5, #16]
 8004326:	b9eb      	cbnz	r3, 8004364 <_vfiprintf_r+0x78>
 8004328:	4629      	mov	r1, r5
 800432a:	4630      	mov	r0, r6
 800432c:	f000 fb5a 	bl	80049e4 <__swsetup_r>
 8004330:	b1c0      	cbz	r0, 8004364 <_vfiprintf_r+0x78>
 8004332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004334:	07dc      	lsls	r4, r3, #31
 8004336:	d50e      	bpl.n	8004356 <_vfiprintf_r+0x6a>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	b01d      	add	sp, #116	; 0x74
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	4b7b      	ldr	r3, [pc, #492]	; (8004530 <_vfiprintf_r+0x244>)
 8004344:	429d      	cmp	r5, r3
 8004346:	d101      	bne.n	800434c <_vfiprintf_r+0x60>
 8004348:	68b5      	ldr	r5, [r6, #8]
 800434a:	e7df      	b.n	800430c <_vfiprintf_r+0x20>
 800434c:	4b79      	ldr	r3, [pc, #484]	; (8004534 <_vfiprintf_r+0x248>)
 800434e:	429d      	cmp	r5, r3
 8004350:	bf08      	it	eq
 8004352:	68f5      	ldreq	r5, [r6, #12]
 8004354:	e7da      	b.n	800430c <_vfiprintf_r+0x20>
 8004356:	89ab      	ldrh	r3, [r5, #12]
 8004358:	0598      	lsls	r0, r3, #22
 800435a:	d4ed      	bmi.n	8004338 <_vfiprintf_r+0x4c>
 800435c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800435e:	f7ff ff40 	bl	80041e2 <__retarget_lock_release_recursive>
 8004362:	e7e9      	b.n	8004338 <_vfiprintf_r+0x4c>
 8004364:	2300      	movs	r3, #0
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	2320      	movs	r3, #32
 800436a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800436e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004372:	2330      	movs	r3, #48	; 0x30
 8004374:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004538 <_vfiprintf_r+0x24c>
 8004378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800437c:	f04f 0901 	mov.w	r9, #1
 8004380:	4623      	mov	r3, r4
 8004382:	469a      	mov	sl, r3
 8004384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004388:	b10a      	cbz	r2, 800438e <_vfiprintf_r+0xa2>
 800438a:	2a25      	cmp	r2, #37	; 0x25
 800438c:	d1f9      	bne.n	8004382 <_vfiprintf_r+0x96>
 800438e:	ebba 0b04 	subs.w	fp, sl, r4
 8004392:	d00b      	beq.n	80043ac <_vfiprintf_r+0xc0>
 8004394:	465b      	mov	r3, fp
 8004396:	4622      	mov	r2, r4
 8004398:	4629      	mov	r1, r5
 800439a:	4630      	mov	r0, r6
 800439c:	f7ff ff93 	bl	80042c6 <__sfputs_r>
 80043a0:	3001      	adds	r0, #1
 80043a2:	f000 80aa 	beq.w	80044fa <_vfiprintf_r+0x20e>
 80043a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a8:	445a      	add	r2, fp
 80043aa:	9209      	str	r2, [sp, #36]	; 0x24
 80043ac:	f89a 3000 	ldrb.w	r3, [sl]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a2 	beq.w	80044fa <_vfiprintf_r+0x20e>
 80043b6:	2300      	movs	r3, #0
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043c0:	f10a 0a01 	add.w	sl, sl, #1
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043cc:	931a      	str	r3, [sp, #104]	; 0x68
 80043ce:	4654      	mov	r4, sl
 80043d0:	2205      	movs	r2, #5
 80043d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d6:	4858      	ldr	r0, [pc, #352]	; (8004538 <_vfiprintf_r+0x24c>)
 80043d8:	f7fb ff0a 	bl	80001f0 <memchr>
 80043dc:	9a04      	ldr	r2, [sp, #16]
 80043de:	b9d8      	cbnz	r0, 8004418 <_vfiprintf_r+0x12c>
 80043e0:	06d1      	lsls	r1, r2, #27
 80043e2:	bf44      	itt	mi
 80043e4:	2320      	movmi	r3, #32
 80043e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ea:	0713      	lsls	r3, r2, #28
 80043ec:	bf44      	itt	mi
 80043ee:	232b      	movmi	r3, #43	; 0x2b
 80043f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f4:	f89a 3000 	ldrb.w	r3, [sl]
 80043f8:	2b2a      	cmp	r3, #42	; 0x2a
 80043fa:	d015      	beq.n	8004428 <_vfiprintf_r+0x13c>
 80043fc:	9a07      	ldr	r2, [sp, #28]
 80043fe:	4654      	mov	r4, sl
 8004400:	2000      	movs	r0, #0
 8004402:	f04f 0c0a 	mov.w	ip, #10
 8004406:	4621      	mov	r1, r4
 8004408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800440c:	3b30      	subs	r3, #48	; 0x30
 800440e:	2b09      	cmp	r3, #9
 8004410:	d94e      	bls.n	80044b0 <_vfiprintf_r+0x1c4>
 8004412:	b1b0      	cbz	r0, 8004442 <_vfiprintf_r+0x156>
 8004414:	9207      	str	r2, [sp, #28]
 8004416:	e014      	b.n	8004442 <_vfiprintf_r+0x156>
 8004418:	eba0 0308 	sub.w	r3, r0, r8
 800441c:	fa09 f303 	lsl.w	r3, r9, r3
 8004420:	4313      	orrs	r3, r2
 8004422:	9304      	str	r3, [sp, #16]
 8004424:	46a2      	mov	sl, r4
 8004426:	e7d2      	b.n	80043ce <_vfiprintf_r+0xe2>
 8004428:	9b03      	ldr	r3, [sp, #12]
 800442a:	1d19      	adds	r1, r3, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	9103      	str	r1, [sp, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	bfbb      	ittet	lt
 8004434:	425b      	neglt	r3, r3
 8004436:	f042 0202 	orrlt.w	r2, r2, #2
 800443a:	9307      	strge	r3, [sp, #28]
 800443c:	9307      	strlt	r3, [sp, #28]
 800443e:	bfb8      	it	lt
 8004440:	9204      	strlt	r2, [sp, #16]
 8004442:	7823      	ldrb	r3, [r4, #0]
 8004444:	2b2e      	cmp	r3, #46	; 0x2e
 8004446:	d10c      	bne.n	8004462 <_vfiprintf_r+0x176>
 8004448:	7863      	ldrb	r3, [r4, #1]
 800444a:	2b2a      	cmp	r3, #42	; 0x2a
 800444c:	d135      	bne.n	80044ba <_vfiprintf_r+0x1ce>
 800444e:	9b03      	ldr	r3, [sp, #12]
 8004450:	1d1a      	adds	r2, r3, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	9203      	str	r2, [sp, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	bfb8      	it	lt
 800445a:	f04f 33ff 	movlt.w	r3, #4294967295
 800445e:	3402      	adds	r4, #2
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004548 <_vfiprintf_r+0x25c>
 8004466:	7821      	ldrb	r1, [r4, #0]
 8004468:	2203      	movs	r2, #3
 800446a:	4650      	mov	r0, sl
 800446c:	f7fb fec0 	bl	80001f0 <memchr>
 8004470:	b140      	cbz	r0, 8004484 <_vfiprintf_r+0x198>
 8004472:	2340      	movs	r3, #64	; 0x40
 8004474:	eba0 000a 	sub.w	r0, r0, sl
 8004478:	fa03 f000 	lsl.w	r0, r3, r0
 800447c:	9b04      	ldr	r3, [sp, #16]
 800447e:	4303      	orrs	r3, r0
 8004480:	3401      	adds	r4, #1
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004488:	482c      	ldr	r0, [pc, #176]	; (800453c <_vfiprintf_r+0x250>)
 800448a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800448e:	2206      	movs	r2, #6
 8004490:	f7fb feae 	bl	80001f0 <memchr>
 8004494:	2800      	cmp	r0, #0
 8004496:	d03f      	beq.n	8004518 <_vfiprintf_r+0x22c>
 8004498:	4b29      	ldr	r3, [pc, #164]	; (8004540 <_vfiprintf_r+0x254>)
 800449a:	bb1b      	cbnz	r3, 80044e4 <_vfiprintf_r+0x1f8>
 800449c:	9b03      	ldr	r3, [sp, #12]
 800449e:	3307      	adds	r3, #7
 80044a0:	f023 0307 	bic.w	r3, r3, #7
 80044a4:	3308      	adds	r3, #8
 80044a6:	9303      	str	r3, [sp, #12]
 80044a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044aa:	443b      	add	r3, r7
 80044ac:	9309      	str	r3, [sp, #36]	; 0x24
 80044ae:	e767      	b.n	8004380 <_vfiprintf_r+0x94>
 80044b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044b4:	460c      	mov	r4, r1
 80044b6:	2001      	movs	r0, #1
 80044b8:	e7a5      	b.n	8004406 <_vfiprintf_r+0x11a>
 80044ba:	2300      	movs	r3, #0
 80044bc:	3401      	adds	r4, #1
 80044be:	9305      	str	r3, [sp, #20]
 80044c0:	4619      	mov	r1, r3
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4620      	mov	r0, r4
 80044c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044cc:	3a30      	subs	r2, #48	; 0x30
 80044ce:	2a09      	cmp	r2, #9
 80044d0:	d903      	bls.n	80044da <_vfiprintf_r+0x1ee>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0c5      	beq.n	8004462 <_vfiprintf_r+0x176>
 80044d6:	9105      	str	r1, [sp, #20]
 80044d8:	e7c3      	b.n	8004462 <_vfiprintf_r+0x176>
 80044da:	fb0c 2101 	mla	r1, ip, r1, r2
 80044de:	4604      	mov	r4, r0
 80044e0:	2301      	movs	r3, #1
 80044e2:	e7f0      	b.n	80044c6 <_vfiprintf_r+0x1da>
 80044e4:	ab03      	add	r3, sp, #12
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	462a      	mov	r2, r5
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <_vfiprintf_r+0x258>)
 80044ec:	a904      	add	r1, sp, #16
 80044ee:	4630      	mov	r0, r6
 80044f0:	f3af 8000 	nop.w
 80044f4:	4607      	mov	r7, r0
 80044f6:	1c78      	adds	r0, r7, #1
 80044f8:	d1d6      	bne.n	80044a8 <_vfiprintf_r+0x1bc>
 80044fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044fc:	07d9      	lsls	r1, r3, #31
 80044fe:	d405      	bmi.n	800450c <_vfiprintf_r+0x220>
 8004500:	89ab      	ldrh	r3, [r5, #12]
 8004502:	059a      	lsls	r2, r3, #22
 8004504:	d402      	bmi.n	800450c <_vfiprintf_r+0x220>
 8004506:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004508:	f7ff fe6b 	bl	80041e2 <__retarget_lock_release_recursive>
 800450c:	89ab      	ldrh	r3, [r5, #12]
 800450e:	065b      	lsls	r3, r3, #25
 8004510:	f53f af12 	bmi.w	8004338 <_vfiprintf_r+0x4c>
 8004514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004516:	e711      	b.n	800433c <_vfiprintf_r+0x50>
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	462a      	mov	r2, r5
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <_vfiprintf_r+0x258>)
 8004520:	a904      	add	r1, sp, #16
 8004522:	4630      	mov	r0, r6
 8004524:	f000 f880 	bl	8004628 <_printf_i>
 8004528:	e7e4      	b.n	80044f4 <_vfiprintf_r+0x208>
 800452a:	bf00      	nop
 800452c:	08004fb0 	.word	0x08004fb0
 8004530:	08004fd0 	.word	0x08004fd0
 8004534:	08004f90 	.word	0x08004f90
 8004538:	08004ff0 	.word	0x08004ff0
 800453c:	08004ffa 	.word	0x08004ffa
 8004540:	00000000 	.word	0x00000000
 8004544:	080042c7 	.word	0x080042c7
 8004548:	08004ff6 	.word	0x08004ff6

0800454c <_printf_common>:
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	4616      	mov	r6, r2
 8004552:	4699      	mov	r9, r3
 8004554:	688a      	ldr	r2, [r1, #8]
 8004556:	690b      	ldr	r3, [r1, #16]
 8004558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800455c:	4293      	cmp	r3, r2
 800455e:	bfb8      	it	lt
 8004560:	4613      	movlt	r3, r2
 8004562:	6033      	str	r3, [r6, #0]
 8004564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004568:	4607      	mov	r7, r0
 800456a:	460c      	mov	r4, r1
 800456c:	b10a      	cbz	r2, 8004572 <_printf_common+0x26>
 800456e:	3301      	adds	r3, #1
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	0699      	lsls	r1, r3, #26
 8004576:	bf42      	ittt	mi
 8004578:	6833      	ldrmi	r3, [r6, #0]
 800457a:	3302      	addmi	r3, #2
 800457c:	6033      	strmi	r3, [r6, #0]
 800457e:	6825      	ldr	r5, [r4, #0]
 8004580:	f015 0506 	ands.w	r5, r5, #6
 8004584:	d106      	bne.n	8004594 <_printf_common+0x48>
 8004586:	f104 0a19 	add.w	sl, r4, #25
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	6832      	ldr	r2, [r6, #0]
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	42ab      	cmp	r3, r5
 8004592:	dc26      	bgt.n	80045e2 <_printf_common+0x96>
 8004594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004598:	1e13      	subs	r3, r2, #0
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	bf18      	it	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	0692      	lsls	r2, r2, #26
 80045a2:	d42b      	bmi.n	80045fc <_printf_common+0xb0>
 80045a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045a8:	4649      	mov	r1, r9
 80045aa:	4638      	mov	r0, r7
 80045ac:	47c0      	blx	r8
 80045ae:	3001      	adds	r0, #1
 80045b0:	d01e      	beq.n	80045f0 <_printf_common+0xa4>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	68e5      	ldr	r5, [r4, #12]
 80045b6:	6832      	ldr	r2, [r6, #0]
 80045b8:	f003 0306 	and.w	r3, r3, #6
 80045bc:	2b04      	cmp	r3, #4
 80045be:	bf08      	it	eq
 80045c0:	1aad      	subeq	r5, r5, r2
 80045c2:	68a3      	ldr	r3, [r4, #8]
 80045c4:	6922      	ldr	r2, [r4, #16]
 80045c6:	bf0c      	ite	eq
 80045c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045cc:	2500      	movne	r5, #0
 80045ce:	4293      	cmp	r3, r2
 80045d0:	bfc4      	itt	gt
 80045d2:	1a9b      	subgt	r3, r3, r2
 80045d4:	18ed      	addgt	r5, r5, r3
 80045d6:	2600      	movs	r6, #0
 80045d8:	341a      	adds	r4, #26
 80045da:	42b5      	cmp	r5, r6
 80045dc:	d11a      	bne.n	8004614 <_printf_common+0xc8>
 80045de:	2000      	movs	r0, #0
 80045e0:	e008      	b.n	80045f4 <_printf_common+0xa8>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4652      	mov	r2, sl
 80045e6:	4649      	mov	r1, r9
 80045e8:	4638      	mov	r0, r7
 80045ea:	47c0      	blx	r8
 80045ec:	3001      	adds	r0, #1
 80045ee:	d103      	bne.n	80045f8 <_printf_common+0xac>
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f8:	3501      	adds	r5, #1
 80045fa:	e7c6      	b.n	800458a <_printf_common+0x3e>
 80045fc:	18e1      	adds	r1, r4, r3
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	2030      	movs	r0, #48	; 0x30
 8004602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004606:	4422      	add	r2, r4
 8004608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800460c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004610:	3302      	adds	r3, #2
 8004612:	e7c7      	b.n	80045a4 <_printf_common+0x58>
 8004614:	2301      	movs	r3, #1
 8004616:	4622      	mov	r2, r4
 8004618:	4649      	mov	r1, r9
 800461a:	4638      	mov	r0, r7
 800461c:	47c0      	blx	r8
 800461e:	3001      	adds	r0, #1
 8004620:	d0e6      	beq.n	80045f0 <_printf_common+0xa4>
 8004622:	3601      	adds	r6, #1
 8004624:	e7d9      	b.n	80045da <_printf_common+0x8e>
	...

08004628 <_printf_i>:
 8004628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	460c      	mov	r4, r1
 800462e:	4691      	mov	r9, r2
 8004630:	7e27      	ldrb	r7, [r4, #24]
 8004632:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004634:	2f78      	cmp	r7, #120	; 0x78
 8004636:	4680      	mov	r8, r0
 8004638:	469a      	mov	sl, r3
 800463a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800463e:	d807      	bhi.n	8004650 <_printf_i+0x28>
 8004640:	2f62      	cmp	r7, #98	; 0x62
 8004642:	d80a      	bhi.n	800465a <_printf_i+0x32>
 8004644:	2f00      	cmp	r7, #0
 8004646:	f000 80d8 	beq.w	80047fa <_printf_i+0x1d2>
 800464a:	2f58      	cmp	r7, #88	; 0x58
 800464c:	f000 80a3 	beq.w	8004796 <_printf_i+0x16e>
 8004650:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004658:	e03a      	b.n	80046d0 <_printf_i+0xa8>
 800465a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800465e:	2b15      	cmp	r3, #21
 8004660:	d8f6      	bhi.n	8004650 <_printf_i+0x28>
 8004662:	a001      	add	r0, pc, #4	; (adr r0, 8004668 <_printf_i+0x40>)
 8004664:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004668:	080046c1 	.word	0x080046c1
 800466c:	080046d5 	.word	0x080046d5
 8004670:	08004651 	.word	0x08004651
 8004674:	08004651 	.word	0x08004651
 8004678:	08004651 	.word	0x08004651
 800467c:	08004651 	.word	0x08004651
 8004680:	080046d5 	.word	0x080046d5
 8004684:	08004651 	.word	0x08004651
 8004688:	08004651 	.word	0x08004651
 800468c:	08004651 	.word	0x08004651
 8004690:	08004651 	.word	0x08004651
 8004694:	080047e1 	.word	0x080047e1
 8004698:	08004705 	.word	0x08004705
 800469c:	080047c3 	.word	0x080047c3
 80046a0:	08004651 	.word	0x08004651
 80046a4:	08004651 	.word	0x08004651
 80046a8:	08004803 	.word	0x08004803
 80046ac:	08004651 	.word	0x08004651
 80046b0:	08004705 	.word	0x08004705
 80046b4:	08004651 	.word	0x08004651
 80046b8:	08004651 	.word	0x08004651
 80046bc:	080047cb 	.word	0x080047cb
 80046c0:	680b      	ldr	r3, [r1, #0]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	600a      	str	r2, [r1, #0]
 80046c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0a3      	b.n	800481c <_printf_i+0x1f4>
 80046d4:	6825      	ldr	r5, [r4, #0]
 80046d6:	6808      	ldr	r0, [r1, #0]
 80046d8:	062e      	lsls	r6, r5, #24
 80046da:	f100 0304 	add.w	r3, r0, #4
 80046de:	d50a      	bpl.n	80046f6 <_printf_i+0xce>
 80046e0:	6805      	ldr	r5, [r0, #0]
 80046e2:	600b      	str	r3, [r1, #0]
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	da03      	bge.n	80046f0 <_printf_i+0xc8>
 80046e8:	232d      	movs	r3, #45	; 0x2d
 80046ea:	426d      	negs	r5, r5
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f0:	485e      	ldr	r0, [pc, #376]	; (800486c <_printf_i+0x244>)
 80046f2:	230a      	movs	r3, #10
 80046f4:	e019      	b.n	800472a <_printf_i+0x102>
 80046f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046fa:	6805      	ldr	r5, [r0, #0]
 80046fc:	600b      	str	r3, [r1, #0]
 80046fe:	bf18      	it	ne
 8004700:	b22d      	sxthne	r5, r5
 8004702:	e7ef      	b.n	80046e4 <_printf_i+0xbc>
 8004704:	680b      	ldr	r3, [r1, #0]
 8004706:	6825      	ldr	r5, [r4, #0]
 8004708:	1d18      	adds	r0, r3, #4
 800470a:	6008      	str	r0, [r1, #0]
 800470c:	0628      	lsls	r0, r5, #24
 800470e:	d501      	bpl.n	8004714 <_printf_i+0xec>
 8004710:	681d      	ldr	r5, [r3, #0]
 8004712:	e002      	b.n	800471a <_printf_i+0xf2>
 8004714:	0669      	lsls	r1, r5, #25
 8004716:	d5fb      	bpl.n	8004710 <_printf_i+0xe8>
 8004718:	881d      	ldrh	r5, [r3, #0]
 800471a:	4854      	ldr	r0, [pc, #336]	; (800486c <_printf_i+0x244>)
 800471c:	2f6f      	cmp	r7, #111	; 0x6f
 800471e:	bf0c      	ite	eq
 8004720:	2308      	moveq	r3, #8
 8004722:	230a      	movne	r3, #10
 8004724:	2100      	movs	r1, #0
 8004726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800472a:	6866      	ldr	r6, [r4, #4]
 800472c:	60a6      	str	r6, [r4, #8]
 800472e:	2e00      	cmp	r6, #0
 8004730:	bfa2      	ittt	ge
 8004732:	6821      	ldrge	r1, [r4, #0]
 8004734:	f021 0104 	bicge.w	r1, r1, #4
 8004738:	6021      	strge	r1, [r4, #0]
 800473a:	b90d      	cbnz	r5, 8004740 <_printf_i+0x118>
 800473c:	2e00      	cmp	r6, #0
 800473e:	d04d      	beq.n	80047dc <_printf_i+0x1b4>
 8004740:	4616      	mov	r6, r2
 8004742:	fbb5 f1f3 	udiv	r1, r5, r3
 8004746:	fb03 5711 	mls	r7, r3, r1, r5
 800474a:	5dc7      	ldrb	r7, [r0, r7]
 800474c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004750:	462f      	mov	r7, r5
 8004752:	42bb      	cmp	r3, r7
 8004754:	460d      	mov	r5, r1
 8004756:	d9f4      	bls.n	8004742 <_printf_i+0x11a>
 8004758:	2b08      	cmp	r3, #8
 800475a:	d10b      	bne.n	8004774 <_printf_i+0x14c>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	07df      	lsls	r7, r3, #31
 8004760:	d508      	bpl.n	8004774 <_printf_i+0x14c>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	6861      	ldr	r1, [r4, #4]
 8004766:	4299      	cmp	r1, r3
 8004768:	bfde      	ittt	le
 800476a:	2330      	movle	r3, #48	; 0x30
 800476c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004774:	1b92      	subs	r2, r2, r6
 8004776:	6122      	str	r2, [r4, #16]
 8004778:	f8cd a000 	str.w	sl, [sp]
 800477c:	464b      	mov	r3, r9
 800477e:	aa03      	add	r2, sp, #12
 8004780:	4621      	mov	r1, r4
 8004782:	4640      	mov	r0, r8
 8004784:	f7ff fee2 	bl	800454c <_printf_common>
 8004788:	3001      	adds	r0, #1
 800478a:	d14c      	bne.n	8004826 <_printf_i+0x1fe>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	b004      	add	sp, #16
 8004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004796:	4835      	ldr	r0, [pc, #212]	; (800486c <_printf_i+0x244>)
 8004798:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	680e      	ldr	r6, [r1, #0]
 80047a0:	061f      	lsls	r7, r3, #24
 80047a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80047a6:	600e      	str	r6, [r1, #0]
 80047a8:	d514      	bpl.n	80047d4 <_printf_i+0x1ac>
 80047aa:	07d9      	lsls	r1, r3, #31
 80047ac:	bf44      	itt	mi
 80047ae:	f043 0320 	orrmi.w	r3, r3, #32
 80047b2:	6023      	strmi	r3, [r4, #0]
 80047b4:	b91d      	cbnz	r5, 80047be <_printf_i+0x196>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f023 0320 	bic.w	r3, r3, #32
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	2310      	movs	r3, #16
 80047c0:	e7b0      	b.n	8004724 <_printf_i+0xfc>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f043 0320 	orr.w	r3, r3, #32
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	2378      	movs	r3, #120	; 0x78
 80047cc:	4828      	ldr	r0, [pc, #160]	; (8004870 <_printf_i+0x248>)
 80047ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047d2:	e7e3      	b.n	800479c <_printf_i+0x174>
 80047d4:	065e      	lsls	r6, r3, #25
 80047d6:	bf48      	it	mi
 80047d8:	b2ad      	uxthmi	r5, r5
 80047da:	e7e6      	b.n	80047aa <_printf_i+0x182>
 80047dc:	4616      	mov	r6, r2
 80047de:	e7bb      	b.n	8004758 <_printf_i+0x130>
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	6826      	ldr	r6, [r4, #0]
 80047e4:	6960      	ldr	r0, [r4, #20]
 80047e6:	1d1d      	adds	r5, r3, #4
 80047e8:	600d      	str	r5, [r1, #0]
 80047ea:	0635      	lsls	r5, r6, #24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	d501      	bpl.n	80047f4 <_printf_i+0x1cc>
 80047f0:	6018      	str	r0, [r3, #0]
 80047f2:	e002      	b.n	80047fa <_printf_i+0x1d2>
 80047f4:	0671      	lsls	r1, r6, #25
 80047f6:	d5fb      	bpl.n	80047f0 <_printf_i+0x1c8>
 80047f8:	8018      	strh	r0, [r3, #0]
 80047fa:	2300      	movs	r3, #0
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	4616      	mov	r6, r2
 8004800:	e7ba      	b.n	8004778 <_printf_i+0x150>
 8004802:	680b      	ldr	r3, [r1, #0]
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	600a      	str	r2, [r1, #0]
 8004808:	681e      	ldr	r6, [r3, #0]
 800480a:	6862      	ldr	r2, [r4, #4]
 800480c:	2100      	movs	r1, #0
 800480e:	4630      	mov	r0, r6
 8004810:	f7fb fcee 	bl	80001f0 <memchr>
 8004814:	b108      	cbz	r0, 800481a <_printf_i+0x1f2>
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	6060      	str	r0, [r4, #4]
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	2300      	movs	r3, #0
 8004820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004824:	e7a8      	b.n	8004778 <_printf_i+0x150>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	4632      	mov	r2, r6
 800482a:	4649      	mov	r1, r9
 800482c:	4640      	mov	r0, r8
 800482e:	47d0      	blx	sl
 8004830:	3001      	adds	r0, #1
 8004832:	d0ab      	beq.n	800478c <_printf_i+0x164>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	079b      	lsls	r3, r3, #30
 8004838:	d413      	bmi.n	8004862 <_printf_i+0x23a>
 800483a:	68e0      	ldr	r0, [r4, #12]
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	4298      	cmp	r0, r3
 8004840:	bfb8      	it	lt
 8004842:	4618      	movlt	r0, r3
 8004844:	e7a4      	b.n	8004790 <_printf_i+0x168>
 8004846:	2301      	movs	r3, #1
 8004848:	4632      	mov	r2, r6
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	47d0      	blx	sl
 8004850:	3001      	adds	r0, #1
 8004852:	d09b      	beq.n	800478c <_printf_i+0x164>
 8004854:	3501      	adds	r5, #1
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	9903      	ldr	r1, [sp, #12]
 800485a:	1a5b      	subs	r3, r3, r1
 800485c:	42ab      	cmp	r3, r5
 800485e:	dcf2      	bgt.n	8004846 <_printf_i+0x21e>
 8004860:	e7eb      	b.n	800483a <_printf_i+0x212>
 8004862:	2500      	movs	r5, #0
 8004864:	f104 0619 	add.w	r6, r4, #25
 8004868:	e7f5      	b.n	8004856 <_printf_i+0x22e>
 800486a:	bf00      	nop
 800486c:	08005001 	.word	0x08005001
 8004870:	08005012 	.word	0x08005012

08004874 <_sbrk_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d06      	ldr	r5, [pc, #24]	; (8004890 <_sbrk_r+0x1c>)
 8004878:	2300      	movs	r3, #0
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	f7fc fc82 	bl	8001188 <_sbrk>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_sbrk_r+0x1a>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_sbrk_r+0x1a>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	20000814 	.word	0x20000814

08004894 <__sread>:
 8004894:	b510      	push	{r4, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	f000 fab4 	bl	8004e08 <_read_r>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	bfab      	itete	ge
 80048a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048a6:	89a3      	ldrhlt	r3, [r4, #12]
 80048a8:	181b      	addge	r3, r3, r0
 80048aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ae:	bfac      	ite	ge
 80048b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80048b2:	81a3      	strhlt	r3, [r4, #12]
 80048b4:	bd10      	pop	{r4, pc}

080048b6 <__swrite>:
 80048b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ba:	461f      	mov	r7, r3
 80048bc:	898b      	ldrh	r3, [r1, #12]
 80048be:	05db      	lsls	r3, r3, #23
 80048c0:	4605      	mov	r5, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	4616      	mov	r6, r2
 80048c6:	d505      	bpl.n	80048d4 <__swrite+0x1e>
 80048c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048cc:	2302      	movs	r3, #2
 80048ce:	2200      	movs	r2, #0
 80048d0:	f000 f9c8 	bl	8004c64 <_lseek_r>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	4632      	mov	r2, r6
 80048e2:	463b      	mov	r3, r7
 80048e4:	4628      	mov	r0, r5
 80048e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ea:	f000 b869 	b.w	80049c0 <_write_r>

080048ee <__sseek>:
 80048ee:	b510      	push	{r4, lr}
 80048f0:	460c      	mov	r4, r1
 80048f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f6:	f000 f9b5 	bl	8004c64 <_lseek_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	bf15      	itete	ne
 8004900:	6560      	strne	r0, [r4, #84]	; 0x54
 8004902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800490a:	81a3      	strheq	r3, [r4, #12]
 800490c:	bf18      	it	ne
 800490e:	81a3      	strhne	r3, [r4, #12]
 8004910:	bd10      	pop	{r4, pc}

08004912 <__sclose>:
 8004912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004916:	f000 b8d3 	b.w	8004ac0 <_close_r>
	...

0800491c <__swbuf_r>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	460e      	mov	r6, r1
 8004920:	4614      	mov	r4, r2
 8004922:	4605      	mov	r5, r0
 8004924:	b118      	cbz	r0, 800492e <__swbuf_r+0x12>
 8004926:	6983      	ldr	r3, [r0, #24]
 8004928:	b90b      	cbnz	r3, 800492e <__swbuf_r+0x12>
 800492a:	f7ff fbbb 	bl	80040a4 <__sinit>
 800492e:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <__swbuf_r+0x98>)
 8004930:	429c      	cmp	r4, r3
 8004932:	d12b      	bne.n	800498c <__swbuf_r+0x70>
 8004934:	686c      	ldr	r4, [r5, #4]
 8004936:	69a3      	ldr	r3, [r4, #24]
 8004938:	60a3      	str	r3, [r4, #8]
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	071a      	lsls	r2, r3, #28
 800493e:	d52f      	bpl.n	80049a0 <__swbuf_r+0x84>
 8004940:	6923      	ldr	r3, [r4, #16]
 8004942:	b36b      	cbz	r3, 80049a0 <__swbuf_r+0x84>
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1ac0      	subs	r0, r0, r3
 800494a:	6963      	ldr	r3, [r4, #20]
 800494c:	b2f6      	uxtb	r6, r6
 800494e:	4283      	cmp	r3, r0
 8004950:	4637      	mov	r7, r6
 8004952:	dc04      	bgt.n	800495e <__swbuf_r+0x42>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 f948 	bl	8004bec <_fflush_r>
 800495c:	bb30      	cbnz	r0, 80049ac <__swbuf_r+0x90>
 800495e:	68a3      	ldr	r3, [r4, #8]
 8004960:	3b01      	subs	r3, #1
 8004962:	60a3      	str	r3, [r4, #8]
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	701e      	strb	r6, [r3, #0]
 800496c:	6963      	ldr	r3, [r4, #20]
 800496e:	3001      	adds	r0, #1
 8004970:	4283      	cmp	r3, r0
 8004972:	d004      	beq.n	800497e <__swbuf_r+0x62>
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	07db      	lsls	r3, r3, #31
 8004978:	d506      	bpl.n	8004988 <__swbuf_r+0x6c>
 800497a:	2e0a      	cmp	r6, #10
 800497c:	d104      	bne.n	8004988 <__swbuf_r+0x6c>
 800497e:	4621      	mov	r1, r4
 8004980:	4628      	mov	r0, r5
 8004982:	f000 f933 	bl	8004bec <_fflush_r>
 8004986:	b988      	cbnz	r0, 80049ac <__swbuf_r+0x90>
 8004988:	4638      	mov	r0, r7
 800498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <__swbuf_r+0x9c>)
 800498e:	429c      	cmp	r4, r3
 8004990:	d101      	bne.n	8004996 <__swbuf_r+0x7a>
 8004992:	68ac      	ldr	r4, [r5, #8]
 8004994:	e7cf      	b.n	8004936 <__swbuf_r+0x1a>
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <__swbuf_r+0xa0>)
 8004998:	429c      	cmp	r4, r3
 800499a:	bf08      	it	eq
 800499c:	68ec      	ldreq	r4, [r5, #12]
 800499e:	e7ca      	b.n	8004936 <__swbuf_r+0x1a>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f81e 	bl	80049e4 <__swsetup_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d0cb      	beq.n	8004944 <__swbuf_r+0x28>
 80049ac:	f04f 37ff 	mov.w	r7, #4294967295
 80049b0:	e7ea      	b.n	8004988 <__swbuf_r+0x6c>
 80049b2:	bf00      	nop
 80049b4:	08004fb0 	.word	0x08004fb0
 80049b8:	08004fd0 	.word	0x08004fd0
 80049bc:	08004f90 	.word	0x08004f90

080049c0 <_write_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	; (80049e0 <_write_r+0x20>)
 80049c4:	4604      	mov	r4, r0
 80049c6:	4608      	mov	r0, r1
 80049c8:	4611      	mov	r1, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	602a      	str	r2, [r5, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f7fc fb89 	bl	80010e6 <_write>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d102      	bne.n	80049de <_write_r+0x1e>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b103      	cbz	r3, 80049de <_write_r+0x1e>
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	20000814 	.word	0x20000814

080049e4 <__swsetup_r>:
 80049e4:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <__swsetup_r+0xcc>)
 80049e6:	b570      	push	{r4, r5, r6, lr}
 80049e8:	681d      	ldr	r5, [r3, #0]
 80049ea:	4606      	mov	r6, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	b125      	cbz	r5, 80049fa <__swsetup_r+0x16>
 80049f0:	69ab      	ldr	r3, [r5, #24]
 80049f2:	b913      	cbnz	r3, 80049fa <__swsetup_r+0x16>
 80049f4:	4628      	mov	r0, r5
 80049f6:	f7ff fb55 	bl	80040a4 <__sinit>
 80049fa:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <__swsetup_r+0xd0>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	d10f      	bne.n	8004a20 <__swsetup_r+0x3c>
 8004a00:	686c      	ldr	r4, [r5, #4]
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a08:	0719      	lsls	r1, r3, #28
 8004a0a:	d42c      	bmi.n	8004a66 <__swsetup_r+0x82>
 8004a0c:	06dd      	lsls	r5, r3, #27
 8004a0e:	d411      	bmi.n	8004a34 <__swsetup_r+0x50>
 8004a10:	2309      	movs	r3, #9
 8004a12:	6033      	str	r3, [r6, #0]
 8004a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	e03e      	b.n	8004a9e <__swsetup_r+0xba>
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <__swsetup_r+0xd4>)
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d101      	bne.n	8004a2a <__swsetup_r+0x46>
 8004a26:	68ac      	ldr	r4, [r5, #8]
 8004a28:	e7eb      	b.n	8004a02 <__swsetup_r+0x1e>
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <__swsetup_r+0xd8>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	bf08      	it	eq
 8004a30:	68ec      	ldreq	r4, [r5, #12]
 8004a32:	e7e6      	b.n	8004a02 <__swsetup_r+0x1e>
 8004a34:	0758      	lsls	r0, r3, #29
 8004a36:	d512      	bpl.n	8004a5e <__swsetup_r+0x7a>
 8004a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a3a:	b141      	cbz	r1, 8004a4e <__swsetup_r+0x6a>
 8004a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a40:	4299      	cmp	r1, r3
 8004a42:	d002      	beq.n	8004a4a <__swsetup_r+0x66>
 8004a44:	4630      	mov	r0, r6
 8004a46:	f000 f98f 	bl	8004d68 <_free_r>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	2300      	movs	r3, #0
 8004a58:	6063      	str	r3, [r4, #4]
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	b94b      	cbnz	r3, 8004a7e <__swsetup_r+0x9a>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a74:	d003      	beq.n	8004a7e <__swsetup_r+0x9a>
 8004a76:	4621      	mov	r1, r4
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f000 f929 	bl	8004cd0 <__smakebuf_r>
 8004a7e:	89a0      	ldrh	r0, [r4, #12]
 8004a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a84:	f010 0301 	ands.w	r3, r0, #1
 8004a88:	d00a      	beq.n	8004aa0 <__swsetup_r+0xbc>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	6963      	ldr	r3, [r4, #20]
 8004a90:	425b      	negs	r3, r3
 8004a92:	61a3      	str	r3, [r4, #24]
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b943      	cbnz	r3, 8004aaa <__swsetup_r+0xc6>
 8004a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a9c:	d1ba      	bne.n	8004a14 <__swsetup_r+0x30>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	0781      	lsls	r1, r0, #30
 8004aa2:	bf58      	it	pl
 8004aa4:	6963      	ldrpl	r3, [r4, #20]
 8004aa6:	60a3      	str	r3, [r4, #8]
 8004aa8:	e7f4      	b.n	8004a94 <__swsetup_r+0xb0>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e7f7      	b.n	8004a9e <__swsetup_r+0xba>
 8004aae:	bf00      	nop
 8004ab0:	20000024 	.word	0x20000024
 8004ab4:	08004fb0 	.word	0x08004fb0
 8004ab8:	08004fd0 	.word	0x08004fd0
 8004abc:	08004f90 	.word	0x08004f90

08004ac0 <_close_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d06      	ldr	r5, [pc, #24]	; (8004adc <_close_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc fb27 	bl	800111e <_close>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_close_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_close_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000814 	.word	0x20000814

08004ae0 <__sflush_r>:
 8004ae0:	898a      	ldrh	r2, [r1, #12]
 8004ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	0710      	lsls	r0, r2, #28
 8004aea:	460c      	mov	r4, r1
 8004aec:	d458      	bmi.n	8004ba0 <__sflush_r+0xc0>
 8004aee:	684b      	ldr	r3, [r1, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	dc05      	bgt.n	8004b00 <__sflush_r+0x20>
 8004af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dc02      	bgt.n	8004b00 <__sflush_r+0x20>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	d0f9      	beq.n	8004afa <__sflush_r+0x1a>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b0c:	682f      	ldr	r7, [r5, #0]
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	d032      	beq.n	8004b78 <__sflush_r+0x98>
 8004b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	075a      	lsls	r2, r3, #29
 8004b18:	d505      	bpl.n	8004b26 <__sflush_r+0x46>
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	1ac0      	subs	r0, r0, r3
 8004b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b20:	b10b      	cbz	r3, 8004b26 <__sflush_r+0x46>
 8004b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b24:	1ac0      	subs	r0, r0, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b2c:	6a21      	ldr	r1, [r4, #32]
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b0      	blx	r6
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	d106      	bne.n	8004b46 <__sflush_r+0x66>
 8004b38:	6829      	ldr	r1, [r5, #0]
 8004b3a:	291d      	cmp	r1, #29
 8004b3c:	d82c      	bhi.n	8004b98 <__sflush_r+0xb8>
 8004b3e:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <__sflush_r+0x108>)
 8004b40:	40ca      	lsrs	r2, r1
 8004b42:	07d6      	lsls	r6, r2, #31
 8004b44:	d528      	bpl.n	8004b98 <__sflush_r+0xb8>
 8004b46:	2200      	movs	r2, #0
 8004b48:	6062      	str	r2, [r4, #4]
 8004b4a:	04d9      	lsls	r1, r3, #19
 8004b4c:	6922      	ldr	r2, [r4, #16]
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	d504      	bpl.n	8004b5c <__sflush_r+0x7c>
 8004b52:	1c42      	adds	r2, r0, #1
 8004b54:	d101      	bne.n	8004b5a <__sflush_r+0x7a>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	b903      	cbnz	r3, 8004b5c <__sflush_r+0x7c>
 8004b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b5e:	602f      	str	r7, [r5, #0]
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d0ca      	beq.n	8004afa <__sflush_r+0x1a>
 8004b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b68:	4299      	cmp	r1, r3
 8004b6a:	d002      	beq.n	8004b72 <__sflush_r+0x92>
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 f8fb 	bl	8004d68 <_free_r>
 8004b72:	2000      	movs	r0, #0
 8004b74:	6360      	str	r0, [r4, #52]	; 0x34
 8004b76:	e7c1      	b.n	8004afc <__sflush_r+0x1c>
 8004b78:	6a21      	ldr	r1, [r4, #32]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b0      	blx	r6
 8004b80:	1c41      	adds	r1, r0, #1
 8004b82:	d1c7      	bne.n	8004b14 <__sflush_r+0x34>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0c4      	beq.n	8004b14 <__sflush_r+0x34>
 8004b8a:	2b1d      	cmp	r3, #29
 8004b8c:	d001      	beq.n	8004b92 <__sflush_r+0xb2>
 8004b8e:	2b16      	cmp	r3, #22
 8004b90:	d101      	bne.n	8004b96 <__sflush_r+0xb6>
 8004b92:	602f      	str	r7, [r5, #0]
 8004b94:	e7b1      	b.n	8004afa <__sflush_r+0x1a>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	e7ad      	b.n	8004afc <__sflush_r+0x1c>
 8004ba0:	690f      	ldr	r7, [r1, #16]
 8004ba2:	2f00      	cmp	r7, #0
 8004ba4:	d0a9      	beq.n	8004afa <__sflush_r+0x1a>
 8004ba6:	0793      	lsls	r3, r2, #30
 8004ba8:	680e      	ldr	r6, [r1, #0]
 8004baa:	bf08      	it	eq
 8004bac:	694b      	ldreq	r3, [r1, #20]
 8004bae:	600f      	str	r7, [r1, #0]
 8004bb0:	bf18      	it	ne
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	eba6 0807 	sub.w	r8, r6, r7
 8004bb8:	608b      	str	r3, [r1, #8]
 8004bba:	f1b8 0f00 	cmp.w	r8, #0
 8004bbe:	dd9c      	ble.n	8004afa <__sflush_r+0x1a>
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	463a      	mov	r2, r7
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b0      	blx	r6
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	dc06      	bgt.n	8004bde <__sflush_r+0xfe>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	e78e      	b.n	8004afc <__sflush_r+0x1c>
 8004bde:	4407      	add	r7, r0
 8004be0:	eba8 0800 	sub.w	r8, r8, r0
 8004be4:	e7e9      	b.n	8004bba <__sflush_r+0xda>
 8004be6:	bf00      	nop
 8004be8:	20400001 	.word	0x20400001

08004bec <_fflush_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	690b      	ldr	r3, [r1, #16]
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	b913      	cbnz	r3, 8004bfc <_fflush_r+0x10>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	b118      	cbz	r0, 8004c06 <_fflush_r+0x1a>
 8004bfe:	6983      	ldr	r3, [r0, #24]
 8004c00:	b90b      	cbnz	r3, 8004c06 <_fflush_r+0x1a>
 8004c02:	f7ff fa4f 	bl	80040a4 <__sinit>
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <_fflush_r+0x6c>)
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	d11b      	bne.n	8004c44 <_fflush_r+0x58>
 8004c0c:	686c      	ldr	r4, [r5, #4]
 8004c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ef      	beq.n	8004bf6 <_fflush_r+0xa>
 8004c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c18:	07d0      	lsls	r0, r2, #31
 8004c1a:	d404      	bmi.n	8004c26 <_fflush_r+0x3a>
 8004c1c:	0599      	lsls	r1, r3, #22
 8004c1e:	d402      	bmi.n	8004c26 <_fflush_r+0x3a>
 8004c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c22:	f7ff fadd 	bl	80041e0 <__retarget_lock_acquire_recursive>
 8004c26:	4628      	mov	r0, r5
 8004c28:	4621      	mov	r1, r4
 8004c2a:	f7ff ff59 	bl	8004ae0 <__sflush_r>
 8004c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c30:	07da      	lsls	r2, r3, #31
 8004c32:	4605      	mov	r5, r0
 8004c34:	d4e0      	bmi.n	8004bf8 <_fflush_r+0xc>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	059b      	lsls	r3, r3, #22
 8004c3a:	d4dd      	bmi.n	8004bf8 <_fflush_r+0xc>
 8004c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3e:	f7ff fad0 	bl	80041e2 <__retarget_lock_release_recursive>
 8004c42:	e7d9      	b.n	8004bf8 <_fflush_r+0xc>
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <_fflush_r+0x70>)
 8004c46:	429c      	cmp	r4, r3
 8004c48:	d101      	bne.n	8004c4e <_fflush_r+0x62>
 8004c4a:	68ac      	ldr	r4, [r5, #8]
 8004c4c:	e7df      	b.n	8004c0e <_fflush_r+0x22>
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <_fflush_r+0x74>)
 8004c50:	429c      	cmp	r4, r3
 8004c52:	bf08      	it	eq
 8004c54:	68ec      	ldreq	r4, [r5, #12]
 8004c56:	e7da      	b.n	8004c0e <_fflush_r+0x22>
 8004c58:	08004fb0 	.word	0x08004fb0
 8004c5c:	08004fd0 	.word	0x08004fd0
 8004c60:	08004f90 	.word	0x08004f90

08004c64 <_lseek_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d07      	ldr	r5, [pc, #28]	; (8004c84 <_lseek_r+0x20>)
 8004c68:	4604      	mov	r4, r0
 8004c6a:	4608      	mov	r0, r1
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	602a      	str	r2, [r5, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f7fc fa7a 	bl	800116c <_lseek>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_lseek_r+0x1e>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_lseek_r+0x1e>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20000814 	.word	0x20000814

08004c88 <__swhatbuf_r>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	460e      	mov	r6, r1
 8004c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c90:	2900      	cmp	r1, #0
 8004c92:	b096      	sub	sp, #88	; 0x58
 8004c94:	4614      	mov	r4, r2
 8004c96:	461d      	mov	r5, r3
 8004c98:	da07      	bge.n	8004caa <__swhatbuf_r+0x22>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	89b3      	ldrh	r3, [r6, #12]
 8004ca0:	061a      	lsls	r2, r3, #24
 8004ca2:	d410      	bmi.n	8004cc6 <__swhatbuf_r+0x3e>
 8004ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca8:	e00e      	b.n	8004cc8 <__swhatbuf_r+0x40>
 8004caa:	466a      	mov	r2, sp
 8004cac:	f000 f8be 	bl	8004e2c <_fstat_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	dbf2      	blt.n	8004c9a <__swhatbuf_r+0x12>
 8004cb4:	9a01      	ldr	r2, [sp, #4]
 8004cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cbe:	425a      	negs	r2, r3
 8004cc0:	415a      	adcs	r2, r3
 8004cc2:	602a      	str	r2, [r5, #0]
 8004cc4:	e7ee      	b.n	8004ca4 <__swhatbuf_r+0x1c>
 8004cc6:	2340      	movs	r3, #64	; 0x40
 8004cc8:	2000      	movs	r0, #0
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	b016      	add	sp, #88	; 0x58
 8004cce:	bd70      	pop	{r4, r5, r6, pc}

08004cd0 <__smakebuf_r>:
 8004cd0:	898b      	ldrh	r3, [r1, #12]
 8004cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cd4:	079d      	lsls	r5, r3, #30
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	460c      	mov	r4, r1
 8004cda:	d507      	bpl.n	8004cec <__smakebuf_r+0x1c>
 8004cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	6163      	str	r3, [r4, #20]
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	ab01      	add	r3, sp, #4
 8004cee:	466a      	mov	r2, sp
 8004cf0:	f7ff ffca 	bl	8004c88 <__swhatbuf_r>
 8004cf4:	9900      	ldr	r1, [sp, #0]
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f7ff fa73 	bl	80041e4 <_malloc_r>
 8004cfe:	b948      	cbnz	r0, 8004d14 <__smakebuf_r+0x44>
 8004d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d04:	059a      	lsls	r2, r3, #22
 8004d06:	d4ef      	bmi.n	8004ce8 <__smakebuf_r+0x18>
 8004d08:	f023 0303 	bic.w	r3, r3, #3
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	e7e3      	b.n	8004cdc <__smakebuf_r+0xc>
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <__smakebuf_r+0x7c>)
 8004d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	6020      	str	r0, [r4, #0]
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	9b00      	ldr	r3, [sp, #0]
 8004d24:	6163      	str	r3, [r4, #20]
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	6120      	str	r0, [r4, #16]
 8004d2a:	b15b      	cbz	r3, 8004d44 <__smakebuf_r+0x74>
 8004d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f88d 	bl	8004e50 <_isatty_r>
 8004d36:	b128      	cbz	r0, 8004d44 <__smakebuf_r+0x74>
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	89a0      	ldrh	r0, [r4, #12]
 8004d46:	4305      	orrs	r5, r0
 8004d48:	81a5      	strh	r5, [r4, #12]
 8004d4a:	e7cd      	b.n	8004ce8 <__smakebuf_r+0x18>
 8004d4c:	0800403d 	.word	0x0800403d

08004d50 <__malloc_lock>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__malloc_lock+0x8>)
 8004d52:	f7ff ba45 	b.w	80041e0 <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	2000080c 	.word	0x2000080c

08004d5c <__malloc_unlock>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__malloc_unlock+0x8>)
 8004d5e:	f7ff ba40 	b.w	80041e2 <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	2000080c 	.word	0x2000080c

08004d68 <_free_r>:
 8004d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	d048      	beq.n	8004e00 <_free_r+0x98>
 8004d6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d72:	9001      	str	r0, [sp, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f1a1 0404 	sub.w	r4, r1, #4
 8004d7a:	bfb8      	it	lt
 8004d7c:	18e4      	addlt	r4, r4, r3
 8004d7e:	f7ff ffe7 	bl	8004d50 <__malloc_lock>
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <_free_r+0x9c>)
 8004d84:	9801      	ldr	r0, [sp, #4]
 8004d86:	6813      	ldr	r3, [r2, #0]
 8004d88:	4615      	mov	r5, r2
 8004d8a:	b933      	cbnz	r3, 8004d9a <_free_r+0x32>
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	6014      	str	r4, [r2, #0]
 8004d90:	b003      	add	sp, #12
 8004d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d96:	f7ff bfe1 	b.w	8004d5c <__malloc_unlock>
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	d90b      	bls.n	8004db6 <_free_r+0x4e>
 8004d9e:	6821      	ldr	r1, [r4, #0]
 8004da0:	1862      	adds	r2, r4, r1
 8004da2:	4293      	cmp	r3, r2
 8004da4:	bf04      	itt	eq
 8004da6:	681a      	ldreq	r2, [r3, #0]
 8004da8:	685b      	ldreq	r3, [r3, #4]
 8004daa:	6063      	str	r3, [r4, #4]
 8004dac:	bf04      	itt	eq
 8004dae:	1852      	addeq	r2, r2, r1
 8004db0:	6022      	streq	r2, [r4, #0]
 8004db2:	602c      	str	r4, [r5, #0]
 8004db4:	e7ec      	b.n	8004d90 <_free_r+0x28>
 8004db6:	461a      	mov	r2, r3
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b10b      	cbz	r3, 8004dc0 <_free_r+0x58>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d9fa      	bls.n	8004db6 <_free_r+0x4e>
 8004dc0:	6811      	ldr	r1, [r2, #0]
 8004dc2:	1855      	adds	r5, r2, r1
 8004dc4:	42a5      	cmp	r5, r4
 8004dc6:	d10b      	bne.n	8004de0 <_free_r+0x78>
 8004dc8:	6824      	ldr	r4, [r4, #0]
 8004dca:	4421      	add	r1, r4
 8004dcc:	1854      	adds	r4, r2, r1
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	d1dd      	bne.n	8004d90 <_free_r+0x28>
 8004dd4:	681c      	ldr	r4, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	6053      	str	r3, [r2, #4]
 8004dda:	4421      	add	r1, r4
 8004ddc:	6011      	str	r1, [r2, #0]
 8004dde:	e7d7      	b.n	8004d90 <_free_r+0x28>
 8004de0:	d902      	bls.n	8004de8 <_free_r+0x80>
 8004de2:	230c      	movs	r3, #12
 8004de4:	6003      	str	r3, [r0, #0]
 8004de6:	e7d3      	b.n	8004d90 <_free_r+0x28>
 8004de8:	6825      	ldr	r5, [r4, #0]
 8004dea:	1961      	adds	r1, r4, r5
 8004dec:	428b      	cmp	r3, r1
 8004dee:	bf04      	itt	eq
 8004df0:	6819      	ldreq	r1, [r3, #0]
 8004df2:	685b      	ldreq	r3, [r3, #4]
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	bf04      	itt	eq
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	6054      	str	r4, [r2, #4]
 8004dfe:	e7c7      	b.n	8004d90 <_free_r+0x28>
 8004e00:	b003      	add	sp, #12
 8004e02:	bd30      	pop	{r4, r5, pc}
 8004e04:	20000744 	.word	0x20000744

08004e08 <_read_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	; (8004e28 <_read_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc f948 	bl	80010ac <_read>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_read_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_read_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000814 	.word	0x20000814

08004e2c <_fstat_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d07      	ldr	r5, [pc, #28]	; (8004e4c <_fstat_r+0x20>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	f7fc f97c 	bl	8001136 <_fstat>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d102      	bne.n	8004e48 <_fstat_r+0x1c>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	b103      	cbz	r3, 8004e48 <_fstat_r+0x1c>
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	bd38      	pop	{r3, r4, r5, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000814 	.word	0x20000814

08004e50 <_isatty_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d06      	ldr	r5, [pc, #24]	; (8004e6c <_isatty_r+0x1c>)
 8004e54:	2300      	movs	r3, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	f7fc f97b 	bl	8001156 <_isatty>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_isatty_r+0x1a>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_isatty_r+0x1a>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	20000814 	.word	0x20000814

08004e70 <_init>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr

08004e7c <_fini>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr
